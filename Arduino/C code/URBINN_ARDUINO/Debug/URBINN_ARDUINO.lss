
URBINN_ARDUINO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800100  00000df8  00000e8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000df8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  00800180  00800180  00000f0c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f0c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b1a  00000000  00000000  00001100  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e1a  00000000  00000000  00002c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cfc  00000000  00000000  00003a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000434  00000000  00000000  00004730  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065c  00000000  00000000  00004b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dbd  00000000  00000000  000051c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00005f7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 83 03 	jmp	0x706	; 0x706 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ef       	ldi	r30, 0xF8	; 248
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 38       	cpi	r26, 0x80	; 128
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e8       	ldi	r26, 0x80	; 128
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 3a       	cpi	r26, 0xA9	; 169
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ba 03 	call	0x774	; 0x774 <main>
  9e:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <message_rx>:
ISR(INT0_vect) {
	message_rx();
}


char message_rx() {
  a6:	9f 92       	push	r9
  a8:	af 92       	push	r10
  aa:	bf 92       	push	r11
  ac:	cf 92       	push	r12
  ae:	df 92       	push	r13
  b0:	ef 92       	push	r14
  b2:	ff 92       	push	r15
  b4:	0f 93       	push	r16
  b6:	1f 93       	push	r17
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	2f 97       	sbiw	r28, 0x0f	; 15
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
	tCAN message;

	if (mcp2515_get_message(&message)) {
  cc:	ce 01       	movw	r24, r28
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	0e 94 c0 01 	call	0x380	; 0x380 <mcp2515_get_message>
  d4:	88 23       	and	r24, r24
  d6:	09 f4       	brne	.+2      	; 0xda <message_rx+0x34>
  d8:	6f c0       	rjmp	.+222    	; 0x1b8 <message_rx+0x112>
		char hexbuffer[4];		// temp buffer for converting to string

		// print to ID, convert the uint16 to string in HEX format
		print_string("ID: ");
  da:	84 e0       	ldi	r24, 0x04	; 4
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <print_string>
		snprintf(hexbuffer,4,"%02X"PRIu16,message.id);
  e2:	8a 81       	ldd	r24, Y+2	; 0x02
  e4:	8f 93       	push	r24
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	8f 93       	push	r24
  ea:	0f 2e       	mov	r0, r31
  ec:	f9 e0       	ldi	r31, 0x09	; 9
  ee:	ef 2e       	mov	r14, r31
  f0:	f1 e0       	ldi	r31, 0x01	; 1
  f2:	ff 2e       	mov	r15, r31
  f4:	f0 2d       	mov	r31, r0
  f6:	ff 92       	push	r15
  f8:	ef 92       	push	r14
  fa:	1f 92       	push	r1
  fc:	84 e0       	ldi	r24, 0x04	; 4
  fe:	8f 93       	push	r24
 100:	8e 01       	movw	r16, r28
 102:	04 5f       	subi	r16, 0xF4	; 244
 104:	1f 4f       	sbci	r17, 0xFF	; 255
 106:	1f 93       	push	r17
 108:	0f 93       	push	r16
 10a:	0e 94 02 04 	call	0x804	; 0x804 <snprintf>
		print_string(hexbuffer);
 10e:	c8 01       	movw	r24, r16
 110:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <print_string>

		print_string(", ");
 114:	8f e0       	ldi	r24, 0x0F	; 15
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <print_string>

		// print the datalength, convert the uint16 to string in HEX format
		print_string("Datalength: ");
 11c:	82 e1       	ldi	r24, 0x12	; 18
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <print_string>
		snprintf(hexbuffer,2,"%02X"PRIu16,message.id);
 124:	8a 81       	ldd	r24, Y+2	; 0x02
 126:	8f 93       	push	r24
 128:	89 81       	ldd	r24, Y+1	; 0x01
 12a:	8f 93       	push	r24
 12c:	ff 92       	push	r15
 12e:	ef 92       	push	r14
 130:	1f 92       	push	r1
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	8f 93       	push	r24
 136:	1f 93       	push	r17
 138:	0f 93       	push	r16
 13a:	0e 94 02 04 	call	0x804	; 0x804 <snprintf>
		print_string(hexbuffer);
 13e:	c8 01       	movw	r24, r16
 140:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <print_string>

		// loop and print all the data
		// convert uint8 to string in HEX format
		print_string(", Data: ");
 144:	8f e1       	ldi	r24, 0x1F	; 31
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <print_string>
		for(int i=0;i<message.header.length;i++) {
 14c:	8b 81       	ldd	r24, Y+3	; 0x03
 14e:	86 95       	lsr	r24
 150:	8f 70       	andi	r24, 0x0F	; 15
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	f8 94       	cli
 156:	de bf       	out	0x3e, r29	; 62
 158:	0f be       	out	0x3f, r0	; 63
 15a:	cd bf       	out	0x3d, r28	; 61
 15c:	49 f1       	breq	.+82     	; 0x1b0 <message_rx+0x10a>
 15e:	6e 01       	movw	r12, r28
 160:	34 e0       	ldi	r19, 0x04	; 4
 162:	c3 0e       	add	r12, r19
 164:	d1 1c       	adc	r13, r1
 166:	a1 2c       	mov	r10, r1
 168:	b1 2c       	mov	r11, r1
			snprintf(hexbuffer,3,"%02X"PRIu8,message.data[i]);
 16a:	0f 2e       	mov	r0, r31
 16c:	f3 e0       	ldi	r31, 0x03	; 3
 16e:	9f 2e       	mov	r9, r31
 170:	f0 2d       	mov	r31, r0
 172:	f6 01       	movw	r30, r12
 174:	81 91       	ld	r24, Z+
 176:	6f 01       	movw	r12, r30
 178:	1f 92       	push	r1
 17a:	8f 93       	push	r24
 17c:	ff 92       	push	r15
 17e:	ef 92       	push	r14
 180:	1f 92       	push	r1
 182:	9f 92       	push	r9
 184:	1f 93       	push	r17
 186:	0f 93       	push	r16
 188:	0e 94 02 04 	call	0x804	; 0x804 <snprintf>
			print_string(hexbuffer);
 18c:	c8 01       	movw	r24, r16
 18e:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <print_string>
		print_string(hexbuffer);

		// loop and print all the data
		// convert uint8 to string in HEX format
		print_string(", Data: ");
		for(int i=0;i<message.header.length;i++) {
 192:	ff ef       	ldi	r31, 0xFF	; 255
 194:	af 1a       	sub	r10, r31
 196:	bf 0a       	sbc	r11, r31
 198:	8b 81       	ldd	r24, Y+3	; 0x03
 19a:	86 95       	lsr	r24
 19c:	8f 70       	andi	r24, 0x0F	; 15
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	f8 94       	cli
 1a4:	de bf       	out	0x3e, r29	; 62
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	cd bf       	out	0x3d, r28	; 61
 1aa:	a8 16       	cp	r10, r24
 1ac:	b9 06       	cpc	r11, r25
 1ae:	0c f3       	brlt	.-62     	; 0x172 <message_rx+0xcc>
			snprintf(hexbuffer,3,"%02X"PRIu8,message.data[i]);
			print_string(hexbuffer);
		}
		// print a new line
		print_string_new_line("");
 1b0:	81 e1       	ldi	r24, 0x11	; 17
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	0e 94 f5 02 	call	0x5ea	; 0x5ea <print_string_new_line>
	}
	return 0;
}
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	2f 96       	adiw	r28, 0x0f	; 15
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	f8 94       	cli
 1c0:	de bf       	out	0x3e, r29	; 62
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	cd bf       	out	0x3d, r28	; 61
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	1f 91       	pop	r17
 1cc:	0f 91       	pop	r16
 1ce:	ff 90       	pop	r15
 1d0:	ef 90       	pop	r14
 1d2:	df 90       	pop	r13
 1d4:	cf 90       	pop	r12
 1d6:	bf 90       	pop	r11
 1d8:	af 90       	pop	r10
 1da:	9f 90       	pop	r9
 1dc:	08 95       	ret

000001de <__vector_1>:
#include "defaults.h"
#include "Canbus.h"
#include "../UART/USART.h"

// PD2 (message received interrupt)
ISR(INT0_vect) {
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	2f 93       	push	r18
 1ea:	3f 93       	push	r19
 1ec:	4f 93       	push	r20
 1ee:	5f 93       	push	r21
 1f0:	6f 93       	push	r22
 1f2:	7f 93       	push	r23
 1f4:	8f 93       	push	r24
 1f6:	9f 93       	push	r25
 1f8:	af 93       	push	r26
 1fa:	bf 93       	push	r27
 1fc:	ef 93       	push	r30
 1fe:	ff 93       	push	r31
	message_rx();
 200:	0e 94 53 00 	call	0xa6	; 0xa6 <message_rx>
}
 204:	ff 91       	pop	r31
 206:	ef 91       	pop	r30
 208:	bf 91       	pop	r27
 20a:	af 91       	pop	r26
 20c:	9f 91       	pop	r25
 20e:	8f 91       	pop	r24
 210:	7f 91       	pop	r23
 212:	6f 91       	pop	r22
 214:	5f 91       	pop	r21
 216:	4f 91       	pop	r20
 218:	3f 91       	pop	r19
 21a:	2f 91       	pop	r18
 21c:	0f 90       	pop	r0
 21e:	0f be       	out	0x3f, r0	; 63
 220:	0f 90       	pop	r0
 222:	1f 90       	pop	r1
 224:	18 95       	reti

00000226 <message_tx>:
		print_string_new_line("");
	}
	return 0;
}

char message_tx(tCAN *message) {
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	ec 01       	movw	r28, r24

	mcp2515_bit_modify(CANCTRL, (1<<REQOP2)|(1<<REQOP1)|(1<<REQOP0), 0);
 22c:	40 e0       	ldi	r20, 0x00	; 0
 22e:	60 ee       	ldi	r22, 0xE0	; 224
 230:	8f e0       	ldi	r24, 0x0F	; 15
 232:	0e 94 54 01 	call	0x2a8	; 0x2a8 <mcp2515_bit_modify>

	if (mcp2515_send_message(message)) {
 236:	ce 01       	movw	r24, r28
 238:	0e 94 40 02 	call	0x480	; 0x480 <mcp2515_send_message>
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	81 11       	cpse	r24, r1
 240:	01 c0       	rjmp	.+2      	; 0x244 <message_tx+0x1e>
 242:	90 e0       	ldi	r25, 0x00	; 0
		return 1;
	} else {
		return 0;
	}
	return 1;
}
 244:	89 2f       	mov	r24, r25
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	08 95       	ret

0000024c <CAN_INIT>:

char CAN_INIT(unsigned char speed) {
	cli(); // disable interrupts
 24c:	f8 94       	cli

	// Set PD2 as input
	DDRD &= ~(1<<DDD3);
 24e:	53 98       	cbi	0x0a, 3	; 10
	PORTD |= (1<<PORTD3);
 250:	5b 9a       	sbi	0x0b, 3	; 11

	// enable interrupt on PD2 (INT0) on the rising edge
	EICRA |= (1 << ISC10) | (1 << ISC11); // any logic
 252:	e9 e6       	ldi	r30, 0x69	; 105
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	90 81       	ld	r25, Z
 258:	9c 60       	ori	r25, 0x0C	; 12
 25a:	90 83       	st	Z, r25

	// enable INT0
	EIMSK |= (1 << INT0);
 25c:	e8 9a       	sbi	0x1d, 0	; 29

	sei(); // enable interrupts
 25e:	78 94       	sei

	// init the MCP2515
	return mcp2515_init(speed);
 260:	0e 94 74 01 	call	0x2e8	; 0x2e8 <mcp2515_init>
 264:	08 95       	ret

00000266 <mcp2515_write_register>:
		// all buffers used
		return false;
	}

	return true;
}
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	d8 2f       	mov	r29, r24
 26c:	c6 2f       	mov	r28, r22
 26e:	2a 98       	cbi	0x05, 2	; 5
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>
 276:	8d 2f       	mov	r24, r29
 278:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>
 27c:	8c 2f       	mov	r24, r28
 27e:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>
 282:	2a 9a       	sbi	0x05, 2	; 5
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <mcp2515_read_register>:
 28a:	cf 93       	push	r28
 28c:	c8 2f       	mov	r28, r24
 28e:	2a 98       	cbi	0x05, 2	; 5
 290:	83 e0       	ldi	r24, 0x03	; 3
 292:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>
 296:	8c 2f       	mov	r24, r28
 298:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>
 2a2:	2a 9a       	sbi	0x05, 2	; 5
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <mcp2515_bit_modify>:
 2a8:	1f 93       	push	r17
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	18 2f       	mov	r17, r24
 2b0:	d6 2f       	mov	r29, r22
 2b2:	c4 2f       	mov	r28, r20
 2b4:	2a 98       	cbi	0x05, 2	; 5
 2b6:	85 e0       	ldi	r24, 0x05	; 5
 2b8:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>
 2bc:	81 2f       	mov	r24, r17
 2be:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>
 2c2:	8d 2f       	mov	r24, r29
 2c4:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>
 2c8:	8c 2f       	mov	r24, r28
 2ca:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>
 2ce:	2a 9a       	sbi	0x05, 2	; 5
 2d0:	df 91       	pop	r29
 2d2:	cf 91       	pop	r28
 2d4:	1f 91       	pop	r17
 2d6:	08 95       	ret

000002d8 <mcp2515_read_status>:
 2d8:	2a 98       	cbi	0x05, 2	; 5
 2da:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>
 2de:	8f ef       	ldi	r24, 0xFF	; 255
 2e0:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>
 2e4:	2a 9a       	sbi	0x05, 2	; 5
 2e6:	08 95       	ret

000002e8 <mcp2515_init>:
 2e8:	cf 93       	push	r28
 2ea:	c8 2f       	mov	r28, r24
 2ec:	2a 9a       	sbi	0x05, 2	; 5
 2ee:	22 9a       	sbi	0x04, 2	; 4
 2f0:	2d 98       	cbi	0x05, 5	; 5
 2f2:	2b 98       	cbi	0x05, 3	; 5
 2f4:	2c 98       	cbi	0x05, 4	; 5
 2f6:	25 9a       	sbi	0x04, 5	; 4
 2f8:	23 9a       	sbi	0x04, 3	; 4
 2fa:	24 98       	cbi	0x04, 4	; 4
 2fc:	52 98       	cbi	0x0a, 2	; 10
 2fe:	5a 9a       	sbi	0x0b, 2	; 11
 300:	0e 94 c0 02 	call	0x580	; 0x580 <spi_init_master>
 304:	2a 98       	cbi	0x05, 2	; 5
 306:	80 ec       	ldi	r24, 0xC0	; 192
 308:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>
 30c:	2a 9a       	sbi	0x05, 2	; 5
 30e:	83 ec       	ldi	r24, 0xC3	; 195
 310:	99 e0       	ldi	r25, 0x09	; 9
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <mcp2515_init+0x2a>
 316:	00 c0       	rjmp	.+0      	; 0x318 <mcp2515_init+0x30>
 318:	00 00       	nop
 31a:	2a 98       	cbi	0x05, 2	; 5
 31c:	82 e0       	ldi	r24, 0x02	; 2
 31e:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>
 322:	88 e2       	ldi	r24, 0x28	; 40
 324:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>
 328:	82 e0       	ldi	r24, 0x02	; 2
 32a:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>
 32e:	80 e9       	ldi	r24, 0x90	; 144
 330:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>
 334:	8c 2f       	mov	r24, r28
 336:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>
 33a:	83 e0       	ldi	r24, 0x03	; 3
 33c:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>
 340:	2a 9a       	sbi	0x05, 2	; 5
 342:	8a e2       	ldi	r24, 0x2A	; 42
 344:	0e 94 45 01 	call	0x28a	; 0x28a <mcp2515_read_register>
 348:	c8 17       	cp	r28, r24
 34a:	19 f0       	breq	.+6      	; 0x352 <mcp2515_init+0x6a>
 34c:	28 9a       	sbi	0x05, 0	; 5
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	15 c0       	rjmp	.+42     	; 0x37c <mcp2515_init+0x94>
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	8c e0       	ldi	r24, 0x0C	; 12
 356:	0e 94 33 01 	call	0x266	; 0x266 <mcp2515_write_register>
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	8d e0       	ldi	r24, 0x0D	; 13
 35e:	0e 94 33 01 	call	0x266	; 0x266 <mcp2515_write_register>
 362:	60 e6       	ldi	r22, 0x60	; 96
 364:	80 e6       	ldi	r24, 0x60	; 96
 366:	0e 94 33 01 	call	0x266	; 0x266 <mcp2515_write_register>
 36a:	60 e6       	ldi	r22, 0x60	; 96
 36c:	80 e7       	ldi	r24, 0x70	; 112
 36e:	0e 94 33 01 	call	0x266	; 0x266 <mcp2515_write_register>
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	8f e0       	ldi	r24, 0x0F	; 15
 376:	0e 94 33 01 	call	0x266	; 0x266 <mcp2515_write_register>
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	cf 91       	pop	r28
 37e:	08 95       	ret

00000380 <mcp2515_get_message>:

// ----------------------------------------------------------------------------
uint8_t mcp2515_get_message(tCAN *message)
{
 380:	cf 92       	push	r12
 382:	df 92       	push	r13
 384:	ef 92       	push	r14
 386:	ff 92       	push	r15
 388:	0f 93       	push	r16
 38a:	1f 93       	push	r17
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	1f 92       	push	r1
 392:	cd b7       	in	r28, 0x3d	; 61
 394:	de b7       	in	r29, 0x3e	; 62
 396:	6c 01       	movw	r12, r24
	// read status
	uint8_t status = mcp2515_read_status(SPI_RX_STATUS);
 398:	80 eb       	ldi	r24, 0xB0	; 176
 39a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <mcp2515_read_status>
 39e:	89 83       	std	Y+1, r24	; 0x01
	uint8_t addr;
	uint8_t t;
	if (bit_is_set(status,6)) {
 3a0:	99 81       	ldd	r25, Y+1	; 0x01
 3a2:	89 2f       	mov	r24, r25
 3a4:	80 74       	andi	r24, 0x40	; 64
 3a6:	96 fd       	sbrc	r25, 6
 3a8:	06 c0       	rjmp	.+12     	; 0x3b6 <mcp2515_get_message+0x36>
		// message in buffer 0
		addr = SPI_READ_RX;
	}
	else if (bit_is_set(status,7)) {
 3aa:	99 81       	ldd	r25, Y+1	; 0x01
 3ac:	99 23       	and	r25, r25
 3ae:	0c f0       	brlt	.+2      	; 0x3b2 <mcp2515_get_message+0x32>
 3b0:	5d c0       	rjmp	.+186    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		// message in buffer 1
		addr = SPI_READ_RX | 0x04;
 3b2:	84 e9       	ldi	r24, 0x94	; 148
 3b4:	01 c0       	rjmp	.+2      	; 0x3b8 <mcp2515_get_message+0x38>
	uint8_t status = mcp2515_read_status(SPI_RX_STATUS);
	uint8_t addr;
	uint8_t t;
	if (bit_is_set(status,6)) {
		// message in buffer 0
		addr = SPI_READ_RX;
 3b6:	80 e9       	ldi	r24, 0x90	; 144
	else {
		// Error: no message available
		return 0;
	}

	RESET(MCP2515_CS);
 3b8:	2a 98       	cbi	0x05, 2	; 5
	spi_putc(addr);
 3ba:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>

	// read id
	message->id  = (uint16_t) spi_putc(0xff) << 3;
 3be:	8f ef       	ldi	r24, 0xFF	; 255
 3c0:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>
 3c4:	28 e0       	ldi	r18, 0x08	; 8
 3c6:	82 9f       	mul	r24, r18
 3c8:	c0 01       	movw	r24, r0
 3ca:	11 24       	eor	r1, r1
 3cc:	f6 01       	movw	r30, r12
 3ce:	91 83       	std	Z+1, r25	; 0x01
 3d0:	80 83       	st	Z, r24
	message->id |=            spi_putc(0xff) >> 5;
 3d2:	8f ef       	ldi	r24, 0xFF	; 255
 3d4:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>
 3d8:	28 2f       	mov	r18, r24
 3da:	22 95       	swap	r18
 3dc:	26 95       	lsr	r18
 3de:	27 70       	andi	r18, 0x07	; 7
 3e0:	f6 01       	movw	r30, r12
 3e2:	80 81       	ld	r24, Z
 3e4:	91 81       	ldd	r25, Z+1	; 0x01
 3e6:	82 2b       	or	r24, r18
 3e8:	91 83       	std	Z+1, r25	; 0x01
 3ea:	80 83       	st	Z, r24

	spi_putc(0xff);
 3ec:	8f ef       	ldi	r24, 0xFF	; 255
 3ee:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>
	spi_putc(0xff);
 3f2:	8f ef       	ldi	r24, 0xFF	; 255
 3f4:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>

	// read DLC
	uint8_t length = spi_putc(0xff) & 0x0f;
 3f8:	8f ef       	ldi	r24, 0xFF	; 255
 3fa:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>
 3fe:	8f 70       	andi	r24, 0x0F	; 15

	message->header.length = length;
 400:	28 2f       	mov	r18, r24
 402:	22 0f       	add	r18, r18
 404:	f6 01       	movw	r30, r12
 406:	92 81       	ldd	r25, Z+2	; 0x02
 408:	91 7e       	andi	r25, 0xE1	; 225
 40a:	92 2b       	or	r25, r18
 40c:	92 83       	std	Z+2, r25	; 0x02
	message->header.rtr = (bit_is_set(status, 3)) ? 1 : 0;
 40e:	29 81       	ldd	r18, Y+1	; 0x01
 410:	23 fb       	bst	r18, 3
 412:	22 27       	eor	r18, r18
 414:	20 f9       	bld	r18, 0
 416:	20 fb       	bst	r18, 0
 418:	90 f9       	bld	r25, 0
 41a:	92 83       	std	Z+2, r25	; 0x02

	// read data
	for (t=0;t<length;t++) {
 41c:	88 23       	and	r24, r24
 41e:	a1 f0       	breq	.+40     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 420:	86 01       	movw	r16, r12
 422:	0d 5f       	subi	r16, 0xFD	; 253
 424:	1f 4f       	sbci	r17, 0xFF	; 255
 426:	81 50       	subi	r24, 0x01	; 1
 428:	e8 2e       	mov	r14, r24
 42a:	f1 2c       	mov	r15, r1
 42c:	f4 e0       	ldi	r31, 0x04	; 4
 42e:	ef 0e       	add	r14, r31
 430:	f1 1c       	adc	r15, r1
 432:	ec 0c       	add	r14, r12
 434:	fd 1c       	adc	r15, r13
		message->data[t] = spi_putc(0xff);
 436:	8f ef       	ldi	r24, 0xFF	; 255
 438:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>
 43c:	f8 01       	movw	r30, r16
 43e:	81 93       	st	Z+, r24
 440:	8f 01       	movw	r16, r30

	message->header.length = length;
	message->header.rtr = (bit_is_set(status, 3)) ? 1 : 0;

	// read data
	for (t=0;t<length;t++) {
 442:	ee 15       	cp	r30, r14
 444:	ff 05       	cpc	r31, r15
 446:	b9 f7       	brne	.-18     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		message->data[t] = spi_putc(0xff);
	}
	SET(MCP2515_CS);
 448:	2a 9a       	sbi	0x05, 2	; 5

	// clear interrupt flag
	if (bit_is_set(status, 6)) {
 44a:	89 81       	ldd	r24, Y+1	; 0x01
 44c:	86 ff       	sbrs	r24, 6
 44e:	06 c0       	rjmp	.+12     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		mcp2515_bit_modify(CANINTF, (1<<RX0IF), 0);
 450:	40 e0       	ldi	r20, 0x00	; 0
 452:	61 e0       	ldi	r22, 0x01	; 1
 454:	8c e2       	ldi	r24, 0x2C	; 44
 456:	0e 94 54 01 	call	0x2a8	; 0x2a8 <mcp2515_bit_modify>
 45a:	05 c0       	rjmp	.+10     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
	}
	else {
		mcp2515_bit_modify(CANINTF, (1<<RX1IF), 0);
 45c:	40 e0       	ldi	r20, 0x00	; 0
 45e:	62 e0       	ldi	r22, 0x02	; 2
 460:	8c e2       	ldi	r24, 0x2C	; 44
 462:	0e 94 54 01 	call	0x2a8	; 0x2a8 <mcp2515_bit_modify>
	}

	return (status & 0x07) + 1;
 466:	89 81       	ldd	r24, Y+1	; 0x01
 468:	87 70       	andi	r24, 0x07	; 7
 46a:	8f 5f       	subi	r24, 0xFF	; 255
}
 46c:	0f 90       	pop	r0
 46e:	df 91       	pop	r29
 470:	cf 91       	pop	r28
 472:	1f 91       	pop	r17
 474:	0f 91       	pop	r16
 476:	ff 90       	pop	r15
 478:	ef 90       	pop	r14
 47a:	df 90       	pop	r13
 47c:	cf 90       	pop	r12
 47e:	08 95       	ret

00000480 <mcp2515_send_message>:

// ----------------------------------------------------------------------------
uint8_t mcp2515_send_message(tCAN *message)
{
 480:	bf 92       	push	r11
 482:	cf 92       	push	r12
 484:	df 92       	push	r13
 486:	ef 92       	push	r14
 488:	ff 92       	push	r15
 48a:	0f 93       	push	r16
 48c:	1f 93       	push	r17
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	1f 92       	push	r1
 494:	cd b7       	in	r28, 0x3d	; 61
 496:	de b7       	in	r29, 0x3e	; 62
 498:	6c 01       	movw	r12, r24
	uint8_t status = mcp2515_read_status(SPI_READ_STATUS);
 49a:	80 ea       	ldi	r24, 0xA0	; 160
 49c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <mcp2515_read_status>
 4a0:	89 83       	std	Y+1, r24	; 0x01
	 *  6	TXB2CNTRL.TXREQ
	 */
	uint8_t address;
	uint8_t t;
//	SET(LED2_HIGH);
	if (bit_is_clear(status, 2)) {
 4a2:	89 81       	ldd	r24, Y+1	; 0x01
 4a4:	82 ff       	sbrs	r24, 2
 4a6:	0a c0       	rjmp	.+20     	; 0x4bc <mcp2515_send_message+0x3c>
		address = 0x00;
	}
	else if (bit_is_clear(status, 4)) {
 4a8:	89 81       	ldd	r24, Y+1	; 0x01
 4aa:	84 ff       	sbrs	r24, 4
 4ac:	09 c0       	rjmp	.+18     	; 0x4c0 <mcp2515_send_message+0x40>
		address = 0x02;
	}
	else if (bit_is_clear(status, 6)) {
 4ae:	89 81       	ldd	r24, Y+1	; 0x01
 4b0:	86 fd       	sbrc	r24, 6
 4b2:	5a c0       	rjmp	.+180    	; 0x568 <mcp2515_send_message+0xe8>
		address = 0x04;
 4b4:	68 94       	set
 4b6:	bb 24       	eor	r11, r11
 4b8:	b2 f8       	bld	r11, 2
 4ba:	05 c0       	rjmp	.+10     	; 0x4c6 <mcp2515_send_message+0x46>
	 */
	uint8_t address;
	uint8_t t;
//	SET(LED2_HIGH);
	if (bit_is_clear(status, 2)) {
		address = 0x00;
 4bc:	b1 2c       	mov	r11, r1
 4be:	03 c0       	rjmp	.+6      	; 0x4c6 <mcp2515_send_message+0x46>
	}
	else if (bit_is_clear(status, 4)) {
		address = 0x02;
 4c0:	68 94       	set
 4c2:	bb 24       	eor	r11, r11
 4c4:	b1 f8       	bld	r11, 1
	else {
		// all buffer used => could not send message
		return 0;
	}

	RESET(MCP2515_CS);
 4c6:	2a 98       	cbi	0x05, 2	; 5
	spi_putc(SPI_WRITE_TX | address);
 4c8:	8b 2d       	mov	r24, r11
 4ca:	80 64       	ori	r24, 0x40	; 64
 4cc:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>

	spi_putc(message->id >> 3);
 4d0:	f6 01       	movw	r30, r12
 4d2:	80 81       	ld	r24, Z
 4d4:	91 81       	ldd	r25, Z+1	; 0x01
 4d6:	96 95       	lsr	r25
 4d8:	87 95       	ror	r24
 4da:	96 95       	lsr	r25
 4dc:	87 95       	ror	r24
 4de:	96 95       	lsr	r25
 4e0:	87 95       	ror	r24
 4e2:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>
    spi_putc(message->id << 5);
 4e6:	f6 01       	movw	r30, r12
 4e8:	80 81       	ld	r24, Z
 4ea:	82 95       	swap	r24
 4ec:	88 0f       	add	r24, r24
 4ee:	80 7e       	andi	r24, 0xE0	; 224
 4f0:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>

	spi_putc(0);
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>
	spi_putc(0);
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>

	uint8_t length = message->header.length & 0x0f;
 500:	f6 01       	movw	r30, r12
 502:	82 81       	ldd	r24, Z+2	; 0x02
 504:	f8 2e       	mov	r15, r24
 506:	f6 94       	lsr	r15
 508:	ff 2d       	mov	r31, r15
 50a:	ff 70       	andi	r31, 0x0F	; 15
 50c:	ff 2e       	mov	r15, r31

	if (message->header.rtr) {
 50e:	80 ff       	sbrs	r24, 0
 510:	05 c0       	rjmp	.+10     	; 0x51c <mcp2515_send_message+0x9c>
		// a rtr-frame has a length, but contains no data
		spi_putc((1<<RTR) | length);
 512:	8f 2f       	mov	r24, r31
 514:	80 64       	ori	r24, 0x40	; 64
 516:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>
 51a:	18 c0       	rjmp	.+48     	; 0x54c <mcp2515_send_message+0xcc>
	}
	else {
		// set message length
		spi_putc(length);
 51c:	8f 2f       	mov	r24, r31
 51e:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>

		// data
		for (t=0;t<length;t++) {
 522:	ff 20       	and	r15, r15
 524:	99 f0       	breq	.+38     	; 0x54c <mcp2515_send_message+0xcc>
 526:	86 01       	movw	r16, r12
 528:	0d 5f       	subi	r16, 0xFD	; 253
 52a:	1f 4f       	sbci	r17, 0xFF	; 255
 52c:	fa 94       	dec	r15
 52e:	ef 2c       	mov	r14, r15
 530:	f1 2c       	mov	r15, r1
 532:	84 e0       	ldi	r24, 0x04	; 4
 534:	e8 0e       	add	r14, r24
 536:	f1 1c       	adc	r15, r1
 538:	ec 0c       	add	r14, r12
 53a:	fd 1c       	adc	r15, r13
			spi_putc(message->data[t]);
 53c:	f8 01       	movw	r30, r16
 53e:	81 91       	ld	r24, Z+
 540:	8f 01       	movw	r16, r30
 542:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>
	else {
		// set message length
		spi_putc(length);

		// data
		for (t=0;t<length;t++) {
 546:	0e 15       	cp	r16, r14
 548:	1f 05       	cpc	r17, r15
 54a:	c1 f7       	brne	.-16     	; 0x53c <mcp2515_send_message+0xbc>
			spi_putc(message->data[t]);
		}
	}
	SET(MCP2515_CS);
 54c:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 54e:	00 00       	nop

	_delay_us(1);

	// send message
	RESET(MCP2515_CS);
 550:	2a 98       	cbi	0x05, 2	; 5
	address = (address == 0) ? 1 : address;
 552:	b1 10       	cpse	r11, r1
 554:	02 c0       	rjmp	.+4      	; 0x55a <mcp2515_send_message+0xda>
 556:	bb 24       	eor	r11, r11
 558:	b3 94       	inc	r11
	spi_putc(SPI_RTS | address);
 55a:	8b 2d       	mov	r24, r11
 55c:	80 68       	ori	r24, 0x80	; 128
 55e:	0e 94 c6 02 	call	0x58c	; 0x58c <spi_putc>
	SET(MCP2515_CS);
 562:	2a 9a       	sbi	0x05, 2	; 5

	return address;
 564:	8b 2d       	mov	r24, r11
 566:	01 c0       	rjmp	.+2      	; 0x56a <mcp2515_send_message+0xea>
	else if (bit_is_clear(status, 6)) {
		address = 0x04;
	}
	else {
		// all buffer used => could not send message
		return 0;
 568:	80 e0       	ldi	r24, 0x00	; 0
	address = (address == 0) ? 1 : address;
	spi_putc(SPI_RTS | address);
	SET(MCP2515_CS);

	return address;
 56a:	0f 90       	pop	r0
 56c:	df 91       	pop	r29
 56e:	cf 91       	pop	r28
 570:	1f 91       	pop	r17
 572:	0f 91       	pop	r16
 574:	ff 90       	pop	r15
 576:	ef 90       	pop	r14
 578:	df 90       	pop	r13
 57a:	cf 90       	pop	r12
 57c:	bf 90       	pop	r11
 57e:	08 95       	ret

00000580 <spi_init_master>:

#include "avr/io.h"

//Initialize SPI Master Device
void spi_init_master() {
	DDRB |= (1<<5)|(1<<3);              //Set MOSI, SCK as Output
 580:	84 b1       	in	r24, 0x04	; 4
 582:	88 62       	ori	r24, 0x28	; 40
 584:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0); //Enable SPI, Set as Master
 586:	81 e5       	ldi	r24, 0x51	; 81
 588:	8c bd       	out	0x2c, r24	; 44
 58a:	08 95       	ret

0000058c <spi_putc>:
	//Prescaler: Fosc/16, Enable Interrupts
}

//Function to send and receive data
uint8_t spi_putc( uint8_t data ) {
	SPDR = data;                       //Load data into the buffer
 58c:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF) ));       //Wait until transmission complete
 58e:	0d b4       	in	r0, 0x2d	; 45
 590:	07 fe       	sbrs	r0, 7
 592:	fd cf       	rjmp	.-6      	; 0x58e <spi_putc+0x2>
	return(SPDR);                      //Return received data
 594:	8e b5       	in	r24, 0x2e	; 46
}
 596:	08 95       	ret

00000598 <clearBuffer>:
}

void print_int_new_line(int32_t data) {
	print_int(data);

	print_new_line();
 598:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <__data_end>
 59c:	88 e2       	ldi	r24, 0x28	; 40
 59e:	e1 e8       	ldi	r30, 0x81	; 129
 5a0:	f1 e0       	ldi	r31, 0x01	; 1
 5a2:	df 01       	movw	r26, r30
 5a4:	1d 92       	st	X+, r1
 5a6:	8a 95       	dec	r24
 5a8:	e9 f7       	brne	.-6      	; 0x5a4 <clearBuffer+0xc>
 5aa:	08 95       	ret

000005ac <USART_transmit>:
 5ac:	dc 01       	movw	r26, r24
 5ae:	e0 ec       	ldi	r30, 0xC0	; 192
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	90 81       	ld	r25, Z
 5b4:	95 ff       	sbrs	r25, 5
 5b6:	fd cf       	rjmp	.-6      	; 0x5b2 <USART_transmit+0x6>
 5b8:	8c 91       	ld	r24, X
 5ba:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 5be:	08 95       	ret

000005c0 <print_string>:
 5c0:	cf 93       	push	r28
 5c2:	df 93       	push	r29
 5c4:	ec 01       	movw	r28, r24
 5c6:	88 81       	ld	r24, Y
 5c8:	88 23       	and	r24, r24
 5ca:	39 f0       	breq	.+14     	; 0x5da <print_string+0x1a>
 5cc:	ce 01       	movw	r24, r28
 5ce:	0e 94 d6 02 	call	0x5ac	; 0x5ac <USART_transmit>
 5d2:	21 96       	adiw	r28, 0x01	; 1
 5d4:	88 81       	ld	r24, Y
 5d6:	81 11       	cpse	r24, r1
 5d8:	f9 cf       	rjmp	.-14     	; 0x5cc <print_string+0xc>
 5da:	df 91       	pop	r29
 5dc:	cf 91       	pop	r28
 5de:	08 95       	ret

000005e0 <print_new_line>:
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	91 e0       	ldi	r25, 0x01	; 1
 5e4:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <print_string>
 5e8:	08 95       	ret

000005ea <print_string_new_line>:
		USART_transmit(data);
	}
}

void print_string_new_line(char * data) {
	print_string(data);
 5ea:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <print_string>

	print_new_line();
 5ee:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <print_new_line>
 5f2:	08 95       	ret

000005f4 <USART_init>:
 *
 * \param baudrate the baudrate the USART will run on
 *
 * \return void
 */
void USART_init(uint32_t baudrate){
 5f4:	9b 01       	movw	r18, r22
 5f6:	ac 01       	movw	r20, r24

	// calculate the baudrate, see the datasheet for more information
	uint16_t baud_setting = (F_CPU / 8 / baudrate - 1) ;
 5f8:	60 e8       	ldi	r22, 0x80	; 128
 5fa:	74 e8       	ldi	r23, 0x84	; 132
 5fc:	8e e1       	ldi	r24, 0x1E	; 30
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <__udivmodsi4>
 604:	21 50       	subi	r18, 0x01	; 1
 606:	31 09       	sbc	r19, r1

	// assign the baud_setting
	UBRR0H = baud_setting >> 8;
 608:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = baud_setting;
 60c:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	// set double data speed
	UCSR0A = (1<<U2X0);
 610:	82 e0       	ldi	r24, 0x02	; 2
 612:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>

	// enable TX and RX (RX is not necessary)
	UCSR0B |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
 616:	e1 ec       	ldi	r30, 0xC1	; 193
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	80 81       	ld	r24, Z
 61c:	88 69       	ori	r24, 0x98	; 152
 61e:	80 83       	st	Z, r24

	// 8 bit data, 1 stop, no parity
	UCSR0C |= _BV(UCSZ01) | _BV(UCSZ00);
 620:	e2 ec       	ldi	r30, 0xC2	; 194
 622:	f0 e0       	ldi	r31, 0x00	; 0
 624:	80 81       	ld	r24, Z
 626:	86 60       	ori	r24, 0x06	; 6
 628:	80 83       	st	Z, r24


	// confirm the init
	print_string_new_line("USART INIT DONE");
 62a:	88 e2       	ldi	r24, 0x28	; 40
 62c:	91 e0       	ldi	r25, 0x01	; 1
 62e:	0e 94 f5 02 	call	0x5ea	; 0x5ea <print_string_new_line>

	sei(); // enable interrupt
 632:	78 94       	sei
 634:	08 95       	ret

00000636 <receive>:
void clearBuffer() {
	receiveBufferCounter = 0;
	memset((char*)receiveBuffer, 0 , RECEIVE_BUFFER_MAX_SIZE);
}

void receive () {
 636:	ef 92       	push	r14
 638:	ff 92       	push	r15
 63a:	0f 93       	push	r16
 63c:	1f 93       	push	r17
 63e:	cf 93       	push	r28
 640:	df 93       	push	r29
 642:	cd b7       	in	r28, 0x3d	; 61
 644:	de b7       	in	r29, 0x3e	; 62
 646:	2b 97       	sbiw	r28, 0x0b	; 11
 648:	0f b6       	in	r0, 0x3f	; 63
 64a:	f8 94       	cli
 64c:	de bf       	out	0x3e, r29	; 62
 64e:	0f be       	out	0x3f, r0	; 63
 650:	cd bf       	out	0x3d, r28	; 61
	// check for full message
	if (receiveBuffer[receiveBufferCounter] != '\r') {
 652:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <__data_end>
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	ef 57       	subi	r30, 0x7F	; 127
 65a:	fe 4f       	sbci	r31, 0xFE	; 254
 65c:	80 81       	ld	r24, Z
 65e:	8d 30       	cpi	r24, 0x0D	; 13
 660:	09 f0       	breq	.+2      	; 0x664 <receive+0x2e>
 662:	44 c0       	rjmp	.+136    	; 0x6ec <receive+0xb6>
		return;
	}

	tCAN frame;
	frame.id = 0x631;
 664:	81 e3       	ldi	r24, 0x31	; 49
 666:	96 e0       	ldi	r25, 0x06	; 6
 668:	9a 83       	std	Y+2, r25	; 0x02
 66a:	89 83       	std	Y+1, r24	; 0x01
	frame.header.rtr = 0;
 66c:	8b 81       	ldd	r24, Y+3	; 0x03
 66e:	8e 7f       	andi	r24, 0xFE	; 254
 670:	8b 83       	std	Y+3, r24	; 0x03
	frame.header.length = receiveBufferCounter;
 672:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <__data_end>
 676:	9f 70       	andi	r25, 0x0F	; 15
 678:	99 0f       	add	r25, r25
 67a:	81 7e       	andi	r24, 0xE1	; 225
 67c:	89 2b       	or	r24, r25
 67e:	8b 83       	std	Y+3, r24	; 0x03

	// format the received message into CAN frames
	for (uint8_t i = 0, j = 0; receiveBufferCounter >= i; j++, i++) {
 680:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <__data_end>
 684:	f1 2c       	mov	r15, r1
 686:	e1 2c       	mov	r14, r1
		frame.data[j] = receiveBuffer[i];
 688:	8f 2d       	mov	r24, r15
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	0e 2d       	mov	r16, r14
 68e:	10 e0       	ldi	r17, 0x00	; 0
 690:	f8 01       	movw	r30, r16
 692:	ef 57       	subi	r30, 0x7F	; 127
 694:	fe 4f       	sbci	r31, 0xFE	; 254
 696:	20 81       	ld	r18, Z
 698:	e4 e0       	ldi	r30, 0x04	; 4
 69a:	f0 e0       	ldi	r31, 0x00	; 0
 69c:	ec 0f       	add	r30, r28
 69e:	fd 1f       	adc	r31, r29
 6a0:	e8 0f       	add	r30, r24
 6a2:	f9 1f       	adc	r31, r25
 6a4:	20 83       	st	Z, r18
		USART_transmit((char*)&frame.data[j]);
 6a6:	03 96       	adiw	r24, 0x03	; 3
 6a8:	21 e0       	ldi	r18, 0x01	; 1
 6aa:	30 e0       	ldi	r19, 0x00	; 0
 6ac:	2c 0f       	add	r18, r28
 6ae:	3d 1f       	adc	r19, r29
 6b0:	82 0f       	add	r24, r18
 6b2:	93 1f       	adc	r25, r19
 6b4:	0e 94 d6 02 	call	0x5ac	; 0x5ac <USART_transmit>

		// check if the message is full
		if (j == CAN_MAX_LENGTH-1 || receiveBuffer[i] == '\r') {
 6b8:	37 e0       	ldi	r19, 0x07	; 7
 6ba:	f3 16       	cp	r15, r19
 6bc:	31 f0       	breq	.+12     	; 0x6ca <receive+0x94>
 6be:	f8 01       	movw	r30, r16
 6c0:	ef 57       	subi	r30, 0x7F	; 127
 6c2:	fe 4f       	sbci	r31, 0xFE	; 254
 6c4:	80 81       	ld	r24, Z
 6c6:	8d 30       	cpi	r24, 0x0D	; 13
 6c8:	49 f4       	brne	.+18     	; 0x6dc <receive+0xa6>
			message_tx(&frame);
 6ca:	ce 01       	movw	r24, r28
 6cc:	01 96       	adiw	r24, 0x01	; 1
 6ce:	0e 94 13 01 	call	0x226	; 0x226 <message_tx>
			j = 0;
			print_string_new_line("  frame send");
 6d2:	88 e3       	ldi	r24, 0x38	; 56
 6d4:	91 e0       	ldi	r25, 0x01	; 1
 6d6:	0e 94 f5 02 	call	0x5ea	; 0x5ea <print_string_new_line>
		USART_transmit((char*)&frame.data[j]);

		// check if the message is full
		if (j == CAN_MAX_LENGTH-1 || receiveBuffer[i] == '\r') {
			message_tx(&frame);
			j = 0;
 6da:	f1 2c       	mov	r15, r1
	frame.id = 0x631;
	frame.header.rtr = 0;
	frame.header.length = receiveBufferCounter;

	// format the received message into CAN frames
	for (uint8_t i = 0, j = 0; receiveBufferCounter >= i; j++, i++) {
 6dc:	f3 94       	inc	r15
 6de:	e3 94       	inc	r14
 6e0:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <__data_end>
 6e4:	8e 15       	cp	r24, r14
 6e6:	80 f6       	brcc	.-96     	; 0x688 <receive+0x52>
			}
		}
	}


	clearBuffer();
 6e8:	0e 94 cc 02 	call	0x598	; 0x598 <clearBuffer>
}
 6ec:	2b 96       	adiw	r28, 0x0b	; 11
 6ee:	0f b6       	in	r0, 0x3f	; 63
 6f0:	f8 94       	cli
 6f2:	de bf       	out	0x3e, r29	; 62
 6f4:	0f be       	out	0x3f, r0	; 63
 6f6:	cd bf       	out	0x3d, r28	; 61
 6f8:	df 91       	pop	r29
 6fa:	cf 91       	pop	r28
 6fc:	1f 91       	pop	r17
 6fe:	0f 91       	pop	r16
 700:	ff 90       	pop	r15
 702:	ef 90       	pop	r14
 704:	08 95       	ret

00000706 <__vector_18>:
	print_string_new_line("USART INIT DONE");

	sei(); // enable interrupt
}

ISR(USART_RX_vect) {
 706:	1f 92       	push	r1
 708:	0f 92       	push	r0
 70a:	0f b6       	in	r0, 0x3f	; 63
 70c:	0f 92       	push	r0
 70e:	11 24       	eor	r1, r1
 710:	2f 93       	push	r18
 712:	3f 93       	push	r19
 714:	4f 93       	push	r20
 716:	5f 93       	push	r21
 718:	6f 93       	push	r22
 71a:	7f 93       	push	r23
 71c:	8f 93       	push	r24
 71e:	9f 93       	push	r25
 720:	af 93       	push	r26
 722:	bf 93       	push	r27
 724:	ef 93       	push	r30
 726:	ff 93       	push	r31
	receiveBuffer[receiveBufferCounter] = UDR0;
 728:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <__data_end>
 72c:	f0 e0       	ldi	r31, 0x00	; 0
 72e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 732:	ef 57       	subi	r30, 0x7F	; 127
 734:	fe 4f       	sbci	r31, 0xFE	; 254
 736:	80 83       	st	Z, r24

	// prevent buffer overflow
	if (receiveBufferCounter > RECEIVE_BUFFER_MAX_SIZE) {
 738:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <__data_end>
 73c:	89 32       	cpi	r24, 0x29	; 41
 73e:	10 f0       	brcs	.+4      	; 0x744 <__vector_18+0x3e>
		receiveBufferCounter = 0;
 740:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <__data_end>
	}

	receive();
 744:	0e 94 1b 03 	call	0x636	; 0x636 <receive>
	receiveBufferCounter++;
 748:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <__data_end>
 74c:	8f 5f       	subi	r24, 0xFF	; 255
 74e:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__data_end>
}
 752:	ff 91       	pop	r31
 754:	ef 91       	pop	r30
 756:	bf 91       	pop	r27
 758:	af 91       	pop	r26
 75a:	9f 91       	pop	r25
 75c:	8f 91       	pop	r24
 75e:	7f 91       	pop	r23
 760:	6f 91       	pop	r22
 762:	5f 91       	pop	r21
 764:	4f 91       	pop	r20
 766:	3f 91       	pop	r19
 768:	2f 91       	pop	r18
 76a:	0f 90       	pop	r0
 76c:	0f be       	out	0x3f, r0	; 63
 76e:	0f 90       	pop	r0
 770:	1f 90       	pop	r1
 772:	18 95       	reti

00000774 <main>:

#include <stdio.h>

int main() {
	// start the serial connection with the PC
	USART_init(USART_BAUDRATE);
 774:	60 e0       	ldi	r22, 0x00	; 0
 776:	76 e9       	ldi	r23, 0x96	; 150
 778:	80 e0       	ldi	r24, 0x00	; 0
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <USART_init>

	spi_init_master();
 780:	0e 94 c0 02 	call	0x580	; 0x580 <spi_init_master>

	// start the CAN connection
	if (CAN_INIT(CANSPEED_500)){
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	0e 94 26 01 	call	0x24c	; 0x24c <CAN_INIT>
 78a:	88 23       	and	r24, r24
 78c:	91 f0       	breq	.+36     	; 0x7b2 <main+0x3e>
		DEBUG_USART("CAN init succes");
 78e:	89 e4       	ldi	r24, 0x49	; 73
 790:	91 e0       	ldi	r25, 0x01	; 1
 792:	0e 94 f5 02 	call	0x5ea	; 0x5ea <print_string_new_line>
	} else {
		DEBUG_USART("CAN init failed");
		return 1;
	}

	DEBUG_USART("Starting main loop...");
 796:	89 e5       	ldi	r24, 0x59	; 89
 798:	91 e0       	ldi	r25, 0x01	; 1
 79a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <print_string_new_line>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 79e:	2f ef       	ldi	r18, 0xFF	; 255
 7a0:	81 ee       	ldi	r24, 0xE1	; 225
 7a2:	94 e0       	ldi	r25, 0x04	; 4
 7a4:	21 50       	subi	r18, 0x01	; 1
 7a6:	80 40       	sbci	r24, 0x00	; 0
 7a8:	90 40       	sbci	r25, 0x00	; 0
 7aa:	e1 f7       	brne	.-8      	; 0x7a4 <main+0x30>
 7ac:	00 c0       	rjmp	.+0      	; 0x7ae <main+0x3a>
 7ae:	00 00       	nop
 7b0:	f6 cf       	rjmp	.-20     	; 0x79e <main+0x2a>

	// start the CAN connection
	if (CAN_INIT(CANSPEED_500)){
		DEBUG_USART("CAN init succes");
	} else {
		DEBUG_USART("CAN init failed");
 7b2:	8f e6       	ldi	r24, 0x6F	; 111
 7b4:	91 e0       	ldi	r25, 0x01	; 1
 7b6:	0e 94 f5 02 	call	0x5ea	; 0x5ea <print_string_new_line>
		message.data[7] = 0x00;

		//message_tx(&message);
		_delay_ms(100);
	}
}
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	08 95       	ret

000007c0 <__udivmodsi4>:
 7c0:	a1 e2       	ldi	r26, 0x21	; 33
 7c2:	1a 2e       	mov	r1, r26
 7c4:	aa 1b       	sub	r26, r26
 7c6:	bb 1b       	sub	r27, r27
 7c8:	fd 01       	movw	r30, r26
 7ca:	0d c0       	rjmp	.+26     	; 0x7e6 <__udivmodsi4_ep>

000007cc <__udivmodsi4_loop>:
 7cc:	aa 1f       	adc	r26, r26
 7ce:	bb 1f       	adc	r27, r27
 7d0:	ee 1f       	adc	r30, r30
 7d2:	ff 1f       	adc	r31, r31
 7d4:	a2 17       	cp	r26, r18
 7d6:	b3 07       	cpc	r27, r19
 7d8:	e4 07       	cpc	r30, r20
 7da:	f5 07       	cpc	r31, r21
 7dc:	20 f0       	brcs	.+8      	; 0x7e6 <__udivmodsi4_ep>
 7de:	a2 1b       	sub	r26, r18
 7e0:	b3 0b       	sbc	r27, r19
 7e2:	e4 0b       	sbc	r30, r20
 7e4:	f5 0b       	sbc	r31, r21

000007e6 <__udivmodsi4_ep>:
 7e6:	66 1f       	adc	r22, r22
 7e8:	77 1f       	adc	r23, r23
 7ea:	88 1f       	adc	r24, r24
 7ec:	99 1f       	adc	r25, r25
 7ee:	1a 94       	dec	r1
 7f0:	69 f7       	brne	.-38     	; 0x7cc <__udivmodsi4_loop>
 7f2:	60 95       	com	r22
 7f4:	70 95       	com	r23
 7f6:	80 95       	com	r24
 7f8:	90 95       	com	r25
 7fa:	9b 01       	movw	r18, r22
 7fc:	ac 01       	movw	r20, r24
 7fe:	bd 01       	movw	r22, r26
 800:	cf 01       	movw	r24, r30
 802:	08 95       	ret

00000804 <snprintf>:
 804:	ae e0       	ldi	r26, 0x0E	; 14
 806:	b0 e0       	ldi	r27, 0x00	; 0
 808:	e8 e0       	ldi	r30, 0x08	; 8
 80a:	f4 e0       	ldi	r31, 0x04	; 4
 80c:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <__prologue_saves__+0x1c>
 810:	0d 89       	ldd	r16, Y+21	; 0x15
 812:	1e 89       	ldd	r17, Y+22	; 0x16
 814:	8f 89       	ldd	r24, Y+23	; 0x17
 816:	98 8d       	ldd	r25, Y+24	; 0x18
 818:	26 e0       	ldi	r18, 0x06	; 6
 81a:	2c 83       	std	Y+4, r18	; 0x04
 81c:	1a 83       	std	Y+2, r17	; 0x02
 81e:	09 83       	std	Y+1, r16	; 0x01
 820:	97 ff       	sbrs	r25, 7
 822:	02 c0       	rjmp	.+4      	; 0x828 <snprintf+0x24>
 824:	80 e0       	ldi	r24, 0x00	; 0
 826:	90 e8       	ldi	r25, 0x80	; 128
 828:	01 97       	sbiw	r24, 0x01	; 1
 82a:	9e 83       	std	Y+6, r25	; 0x06
 82c:	8d 83       	std	Y+5, r24	; 0x05
 82e:	ae 01       	movw	r20, r28
 830:	45 5e       	subi	r20, 0xE5	; 229
 832:	5f 4f       	sbci	r21, 0xFF	; 255
 834:	69 8d       	ldd	r22, Y+25	; 0x19
 836:	7a 8d       	ldd	r23, Y+26	; 0x1a
 838:	ce 01       	movw	r24, r28
 83a:	01 96       	adiw	r24, 0x01	; 1
 83c:	0e 94 32 04 	call	0x864	; 0x864 <vfprintf>
 840:	4d 81       	ldd	r20, Y+5	; 0x05
 842:	5e 81       	ldd	r21, Y+6	; 0x06
 844:	57 fd       	sbrc	r21, 7
 846:	0a c0       	rjmp	.+20     	; 0x85c <snprintf+0x58>
 848:	2f 81       	ldd	r18, Y+7	; 0x07
 84a:	38 85       	ldd	r19, Y+8	; 0x08
 84c:	42 17       	cp	r20, r18
 84e:	53 07       	cpc	r21, r19
 850:	0c f4       	brge	.+2      	; 0x854 <snprintf+0x50>
 852:	9a 01       	movw	r18, r20
 854:	f8 01       	movw	r30, r16
 856:	e2 0f       	add	r30, r18
 858:	f3 1f       	adc	r31, r19
 85a:	10 82       	st	Z, r1
 85c:	2e 96       	adiw	r28, 0x0e	; 14
 85e:	e4 e0       	ldi	r30, 0x04	; 4
 860:	0c 94 ed 06 	jmp	0xdda	; 0xdda <__epilogue_restores__+0x1c>

00000864 <vfprintf>:
 864:	ab e0       	ldi	r26, 0x0B	; 11
 866:	b0 e0       	ldi	r27, 0x00	; 0
 868:	e8 e3       	ldi	r30, 0x38	; 56
 86a:	f4 e0       	ldi	r31, 0x04	; 4
 86c:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <__prologue_saves__>
 870:	6c 01       	movw	r12, r24
 872:	7b 01       	movw	r14, r22
 874:	8a 01       	movw	r16, r20
 876:	fc 01       	movw	r30, r24
 878:	17 82       	std	Z+7, r1	; 0x07
 87a:	16 82       	std	Z+6, r1	; 0x06
 87c:	83 81       	ldd	r24, Z+3	; 0x03
 87e:	81 ff       	sbrs	r24, 1
 880:	cc c1       	rjmp	.+920    	; 0xc1a <__stack+0x31b>
 882:	ce 01       	movw	r24, r28
 884:	01 96       	adiw	r24, 0x01	; 1
 886:	3c 01       	movw	r6, r24
 888:	f6 01       	movw	r30, r12
 88a:	93 81       	ldd	r25, Z+3	; 0x03
 88c:	f7 01       	movw	r30, r14
 88e:	93 fd       	sbrc	r25, 3
 890:	85 91       	lpm	r24, Z+
 892:	93 ff       	sbrs	r25, 3
 894:	81 91       	ld	r24, Z+
 896:	7f 01       	movw	r14, r30
 898:	88 23       	and	r24, r24
 89a:	09 f4       	brne	.+2      	; 0x89e <vfprintf+0x3a>
 89c:	ba c1       	rjmp	.+884    	; 0xc12 <__stack+0x313>
 89e:	85 32       	cpi	r24, 0x25	; 37
 8a0:	39 f4       	brne	.+14     	; 0x8b0 <vfprintf+0x4c>
 8a2:	93 fd       	sbrc	r25, 3
 8a4:	85 91       	lpm	r24, Z+
 8a6:	93 ff       	sbrs	r25, 3
 8a8:	81 91       	ld	r24, Z+
 8aa:	7f 01       	movw	r14, r30
 8ac:	85 32       	cpi	r24, 0x25	; 37
 8ae:	29 f4       	brne	.+10     	; 0x8ba <vfprintf+0x56>
 8b0:	b6 01       	movw	r22, r12
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	0e 94 29 06 	call	0xc52	; 0xc52 <fputc>
 8b8:	e7 cf       	rjmp	.-50     	; 0x888 <vfprintf+0x24>
 8ba:	91 2c       	mov	r9, r1
 8bc:	21 2c       	mov	r2, r1
 8be:	31 2c       	mov	r3, r1
 8c0:	ff e1       	ldi	r31, 0x1F	; 31
 8c2:	f3 15       	cp	r31, r3
 8c4:	d8 f0       	brcs	.+54     	; 0x8fc <vfprintf+0x98>
 8c6:	8b 32       	cpi	r24, 0x2B	; 43
 8c8:	79 f0       	breq	.+30     	; 0x8e8 <vfprintf+0x84>
 8ca:	38 f4       	brcc	.+14     	; 0x8da <vfprintf+0x76>
 8cc:	80 32       	cpi	r24, 0x20	; 32
 8ce:	79 f0       	breq	.+30     	; 0x8ee <vfprintf+0x8a>
 8d0:	83 32       	cpi	r24, 0x23	; 35
 8d2:	a1 f4       	brne	.+40     	; 0x8fc <vfprintf+0x98>
 8d4:	23 2d       	mov	r18, r3
 8d6:	20 61       	ori	r18, 0x10	; 16
 8d8:	1d c0       	rjmp	.+58     	; 0x914 <__stack+0x15>
 8da:	8d 32       	cpi	r24, 0x2D	; 45
 8dc:	61 f0       	breq	.+24     	; 0x8f6 <vfprintf+0x92>
 8de:	80 33       	cpi	r24, 0x30	; 48
 8e0:	69 f4       	brne	.+26     	; 0x8fc <vfprintf+0x98>
 8e2:	23 2d       	mov	r18, r3
 8e4:	21 60       	ori	r18, 0x01	; 1
 8e6:	16 c0       	rjmp	.+44     	; 0x914 <__stack+0x15>
 8e8:	83 2d       	mov	r24, r3
 8ea:	82 60       	ori	r24, 0x02	; 2
 8ec:	38 2e       	mov	r3, r24
 8ee:	e3 2d       	mov	r30, r3
 8f0:	e4 60       	ori	r30, 0x04	; 4
 8f2:	3e 2e       	mov	r3, r30
 8f4:	2a c0       	rjmp	.+84     	; 0x94a <__stack+0x4b>
 8f6:	f3 2d       	mov	r31, r3
 8f8:	f8 60       	ori	r31, 0x08	; 8
 8fa:	1d c0       	rjmp	.+58     	; 0x936 <__stack+0x37>
 8fc:	37 fc       	sbrc	r3, 7
 8fe:	2d c0       	rjmp	.+90     	; 0x95a <__stack+0x5b>
 900:	20 ed       	ldi	r18, 0xD0	; 208
 902:	28 0f       	add	r18, r24
 904:	2a 30       	cpi	r18, 0x0A	; 10
 906:	40 f0       	brcs	.+16     	; 0x918 <__stack+0x19>
 908:	8e 32       	cpi	r24, 0x2E	; 46
 90a:	b9 f4       	brne	.+46     	; 0x93a <__stack+0x3b>
 90c:	36 fc       	sbrc	r3, 6
 90e:	81 c1       	rjmp	.+770    	; 0xc12 <__stack+0x313>
 910:	23 2d       	mov	r18, r3
 912:	20 64       	ori	r18, 0x40	; 64
 914:	32 2e       	mov	r3, r18
 916:	19 c0       	rjmp	.+50     	; 0x94a <__stack+0x4b>
 918:	36 fe       	sbrs	r3, 6
 91a:	06 c0       	rjmp	.+12     	; 0x928 <__stack+0x29>
 91c:	8a e0       	ldi	r24, 0x0A	; 10
 91e:	98 9e       	mul	r9, r24
 920:	20 0d       	add	r18, r0
 922:	11 24       	eor	r1, r1
 924:	92 2e       	mov	r9, r18
 926:	11 c0       	rjmp	.+34     	; 0x94a <__stack+0x4b>
 928:	ea e0       	ldi	r30, 0x0A	; 10
 92a:	2e 9e       	mul	r2, r30
 92c:	20 0d       	add	r18, r0
 92e:	11 24       	eor	r1, r1
 930:	22 2e       	mov	r2, r18
 932:	f3 2d       	mov	r31, r3
 934:	f0 62       	ori	r31, 0x20	; 32
 936:	3f 2e       	mov	r3, r31
 938:	08 c0       	rjmp	.+16     	; 0x94a <__stack+0x4b>
 93a:	8c 36       	cpi	r24, 0x6C	; 108
 93c:	21 f4       	brne	.+8      	; 0x946 <__stack+0x47>
 93e:	83 2d       	mov	r24, r3
 940:	80 68       	ori	r24, 0x80	; 128
 942:	38 2e       	mov	r3, r24
 944:	02 c0       	rjmp	.+4      	; 0x94a <__stack+0x4b>
 946:	88 36       	cpi	r24, 0x68	; 104
 948:	41 f4       	brne	.+16     	; 0x95a <__stack+0x5b>
 94a:	f7 01       	movw	r30, r14
 94c:	93 fd       	sbrc	r25, 3
 94e:	85 91       	lpm	r24, Z+
 950:	93 ff       	sbrs	r25, 3
 952:	81 91       	ld	r24, Z+
 954:	7f 01       	movw	r14, r30
 956:	81 11       	cpse	r24, r1
 958:	b3 cf       	rjmp	.-154    	; 0x8c0 <vfprintf+0x5c>
 95a:	98 2f       	mov	r25, r24
 95c:	9f 7d       	andi	r25, 0xDF	; 223
 95e:	95 54       	subi	r25, 0x45	; 69
 960:	93 30       	cpi	r25, 0x03	; 3
 962:	28 f4       	brcc	.+10     	; 0x96e <__stack+0x6f>
 964:	0c 5f       	subi	r16, 0xFC	; 252
 966:	1f 4f       	sbci	r17, 0xFF	; 255
 968:	9f e3       	ldi	r25, 0x3F	; 63
 96a:	99 83       	std	Y+1, r25	; 0x01
 96c:	0d c0       	rjmp	.+26     	; 0x988 <__stack+0x89>
 96e:	83 36       	cpi	r24, 0x63	; 99
 970:	31 f0       	breq	.+12     	; 0x97e <__stack+0x7f>
 972:	83 37       	cpi	r24, 0x73	; 115
 974:	71 f0       	breq	.+28     	; 0x992 <__stack+0x93>
 976:	83 35       	cpi	r24, 0x53	; 83
 978:	09 f0       	breq	.+2      	; 0x97c <__stack+0x7d>
 97a:	59 c0       	rjmp	.+178    	; 0xa2e <__stack+0x12f>
 97c:	21 c0       	rjmp	.+66     	; 0x9c0 <__stack+0xc1>
 97e:	f8 01       	movw	r30, r16
 980:	80 81       	ld	r24, Z
 982:	89 83       	std	Y+1, r24	; 0x01
 984:	0e 5f       	subi	r16, 0xFE	; 254
 986:	1f 4f       	sbci	r17, 0xFF	; 255
 988:	88 24       	eor	r8, r8
 98a:	83 94       	inc	r8
 98c:	91 2c       	mov	r9, r1
 98e:	53 01       	movw	r10, r6
 990:	13 c0       	rjmp	.+38     	; 0x9b8 <__stack+0xb9>
 992:	28 01       	movw	r4, r16
 994:	f2 e0       	ldi	r31, 0x02	; 2
 996:	4f 0e       	add	r4, r31
 998:	51 1c       	adc	r5, r1
 99a:	f8 01       	movw	r30, r16
 99c:	a0 80       	ld	r10, Z
 99e:	b1 80       	ldd	r11, Z+1	; 0x01
 9a0:	36 fe       	sbrs	r3, 6
 9a2:	03 c0       	rjmp	.+6      	; 0x9aa <__stack+0xab>
 9a4:	69 2d       	mov	r22, r9
 9a6:	70 e0       	ldi	r23, 0x00	; 0
 9a8:	02 c0       	rjmp	.+4      	; 0x9ae <__stack+0xaf>
 9aa:	6f ef       	ldi	r22, 0xFF	; 255
 9ac:	7f ef       	ldi	r23, 0xFF	; 255
 9ae:	c5 01       	movw	r24, r10
 9b0:	0e 94 1e 06 	call	0xc3c	; 0xc3c <strnlen>
 9b4:	4c 01       	movw	r8, r24
 9b6:	82 01       	movw	r16, r4
 9b8:	f3 2d       	mov	r31, r3
 9ba:	ff 77       	andi	r31, 0x7F	; 127
 9bc:	3f 2e       	mov	r3, r31
 9be:	16 c0       	rjmp	.+44     	; 0x9ec <__stack+0xed>
 9c0:	28 01       	movw	r4, r16
 9c2:	22 e0       	ldi	r18, 0x02	; 2
 9c4:	42 0e       	add	r4, r18
 9c6:	51 1c       	adc	r5, r1
 9c8:	f8 01       	movw	r30, r16
 9ca:	a0 80       	ld	r10, Z
 9cc:	b1 80       	ldd	r11, Z+1	; 0x01
 9ce:	36 fe       	sbrs	r3, 6
 9d0:	03 c0       	rjmp	.+6      	; 0x9d8 <__stack+0xd9>
 9d2:	69 2d       	mov	r22, r9
 9d4:	70 e0       	ldi	r23, 0x00	; 0
 9d6:	02 c0       	rjmp	.+4      	; 0x9dc <__stack+0xdd>
 9d8:	6f ef       	ldi	r22, 0xFF	; 255
 9da:	7f ef       	ldi	r23, 0xFF	; 255
 9dc:	c5 01       	movw	r24, r10
 9de:	0e 94 13 06 	call	0xc26	; 0xc26 <strnlen_P>
 9e2:	4c 01       	movw	r8, r24
 9e4:	f3 2d       	mov	r31, r3
 9e6:	f0 68       	ori	r31, 0x80	; 128
 9e8:	3f 2e       	mov	r3, r31
 9ea:	82 01       	movw	r16, r4
 9ec:	33 fc       	sbrc	r3, 3
 9ee:	1b c0       	rjmp	.+54     	; 0xa26 <__stack+0x127>
 9f0:	82 2d       	mov	r24, r2
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	88 16       	cp	r8, r24
 9f6:	99 06       	cpc	r9, r25
 9f8:	b0 f4       	brcc	.+44     	; 0xa26 <__stack+0x127>
 9fa:	b6 01       	movw	r22, r12
 9fc:	80 e2       	ldi	r24, 0x20	; 32
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	0e 94 29 06 	call	0xc52	; 0xc52 <fputc>
 a04:	2a 94       	dec	r2
 a06:	f4 cf       	rjmp	.-24     	; 0x9f0 <__stack+0xf1>
 a08:	f5 01       	movw	r30, r10
 a0a:	37 fc       	sbrc	r3, 7
 a0c:	85 91       	lpm	r24, Z+
 a0e:	37 fe       	sbrs	r3, 7
 a10:	81 91       	ld	r24, Z+
 a12:	5f 01       	movw	r10, r30
 a14:	b6 01       	movw	r22, r12
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	0e 94 29 06 	call	0xc52	; 0xc52 <fputc>
 a1c:	21 10       	cpse	r2, r1
 a1e:	2a 94       	dec	r2
 a20:	21 e0       	ldi	r18, 0x01	; 1
 a22:	82 1a       	sub	r8, r18
 a24:	91 08       	sbc	r9, r1
 a26:	81 14       	cp	r8, r1
 a28:	91 04       	cpc	r9, r1
 a2a:	71 f7       	brne	.-36     	; 0xa08 <__stack+0x109>
 a2c:	e8 c0       	rjmp	.+464    	; 0xbfe <__stack+0x2ff>
 a2e:	84 36       	cpi	r24, 0x64	; 100
 a30:	11 f0       	breq	.+4      	; 0xa36 <__stack+0x137>
 a32:	89 36       	cpi	r24, 0x69	; 105
 a34:	41 f5       	brne	.+80     	; 0xa86 <__stack+0x187>
 a36:	f8 01       	movw	r30, r16
 a38:	37 fe       	sbrs	r3, 7
 a3a:	07 c0       	rjmp	.+14     	; 0xa4a <__stack+0x14b>
 a3c:	60 81       	ld	r22, Z
 a3e:	71 81       	ldd	r23, Z+1	; 0x01
 a40:	82 81       	ldd	r24, Z+2	; 0x02
 a42:	93 81       	ldd	r25, Z+3	; 0x03
 a44:	0c 5f       	subi	r16, 0xFC	; 252
 a46:	1f 4f       	sbci	r17, 0xFF	; 255
 a48:	08 c0       	rjmp	.+16     	; 0xa5a <__stack+0x15b>
 a4a:	60 81       	ld	r22, Z
 a4c:	71 81       	ldd	r23, Z+1	; 0x01
 a4e:	07 2e       	mov	r0, r23
 a50:	00 0c       	add	r0, r0
 a52:	88 0b       	sbc	r24, r24
 a54:	99 0b       	sbc	r25, r25
 a56:	0e 5f       	subi	r16, 0xFE	; 254
 a58:	1f 4f       	sbci	r17, 0xFF	; 255
 a5a:	f3 2d       	mov	r31, r3
 a5c:	ff 76       	andi	r31, 0x6F	; 111
 a5e:	3f 2e       	mov	r3, r31
 a60:	97 ff       	sbrs	r25, 7
 a62:	09 c0       	rjmp	.+18     	; 0xa76 <__stack+0x177>
 a64:	90 95       	com	r25
 a66:	80 95       	com	r24
 a68:	70 95       	com	r23
 a6a:	61 95       	neg	r22
 a6c:	7f 4f       	sbci	r23, 0xFF	; 255
 a6e:	8f 4f       	sbci	r24, 0xFF	; 255
 a70:	9f 4f       	sbci	r25, 0xFF	; 255
 a72:	f0 68       	ori	r31, 0x80	; 128
 a74:	3f 2e       	mov	r3, r31
 a76:	2a e0       	ldi	r18, 0x0A	; 10
 a78:	30 e0       	ldi	r19, 0x00	; 0
 a7a:	a3 01       	movw	r20, r6
 a7c:	0e 94 65 06 	call	0xcca	; 0xcca <__ultoa_invert>
 a80:	88 2e       	mov	r8, r24
 a82:	86 18       	sub	r8, r6
 a84:	45 c0       	rjmp	.+138    	; 0xb10 <__stack+0x211>
 a86:	85 37       	cpi	r24, 0x75	; 117
 a88:	31 f4       	brne	.+12     	; 0xa96 <__stack+0x197>
 a8a:	23 2d       	mov	r18, r3
 a8c:	2f 7e       	andi	r18, 0xEF	; 239
 a8e:	b2 2e       	mov	r11, r18
 a90:	2a e0       	ldi	r18, 0x0A	; 10
 a92:	30 e0       	ldi	r19, 0x00	; 0
 a94:	25 c0       	rjmp	.+74     	; 0xae0 <__stack+0x1e1>
 a96:	93 2d       	mov	r25, r3
 a98:	99 7f       	andi	r25, 0xF9	; 249
 a9a:	b9 2e       	mov	r11, r25
 a9c:	8f 36       	cpi	r24, 0x6F	; 111
 a9e:	c1 f0       	breq	.+48     	; 0xad0 <__stack+0x1d1>
 aa0:	18 f4       	brcc	.+6      	; 0xaa8 <__stack+0x1a9>
 aa2:	88 35       	cpi	r24, 0x58	; 88
 aa4:	79 f0       	breq	.+30     	; 0xac4 <__stack+0x1c5>
 aa6:	b5 c0       	rjmp	.+362    	; 0xc12 <__stack+0x313>
 aa8:	80 37       	cpi	r24, 0x70	; 112
 aaa:	19 f0       	breq	.+6      	; 0xab2 <__stack+0x1b3>
 aac:	88 37       	cpi	r24, 0x78	; 120
 aae:	21 f0       	breq	.+8      	; 0xab8 <__stack+0x1b9>
 ab0:	b0 c0       	rjmp	.+352    	; 0xc12 <__stack+0x313>
 ab2:	e9 2f       	mov	r30, r25
 ab4:	e0 61       	ori	r30, 0x10	; 16
 ab6:	be 2e       	mov	r11, r30
 ab8:	b4 fe       	sbrs	r11, 4
 aba:	0d c0       	rjmp	.+26     	; 0xad6 <__stack+0x1d7>
 abc:	fb 2d       	mov	r31, r11
 abe:	f4 60       	ori	r31, 0x04	; 4
 ac0:	bf 2e       	mov	r11, r31
 ac2:	09 c0       	rjmp	.+18     	; 0xad6 <__stack+0x1d7>
 ac4:	34 fe       	sbrs	r3, 4
 ac6:	0a c0       	rjmp	.+20     	; 0xadc <__stack+0x1dd>
 ac8:	29 2f       	mov	r18, r25
 aca:	26 60       	ori	r18, 0x06	; 6
 acc:	b2 2e       	mov	r11, r18
 ace:	06 c0       	rjmp	.+12     	; 0xadc <__stack+0x1dd>
 ad0:	28 e0       	ldi	r18, 0x08	; 8
 ad2:	30 e0       	ldi	r19, 0x00	; 0
 ad4:	05 c0       	rjmp	.+10     	; 0xae0 <__stack+0x1e1>
 ad6:	20 e1       	ldi	r18, 0x10	; 16
 ad8:	30 e0       	ldi	r19, 0x00	; 0
 ada:	02 c0       	rjmp	.+4      	; 0xae0 <__stack+0x1e1>
 adc:	20 e1       	ldi	r18, 0x10	; 16
 ade:	32 e0       	ldi	r19, 0x02	; 2
 ae0:	f8 01       	movw	r30, r16
 ae2:	b7 fe       	sbrs	r11, 7
 ae4:	07 c0       	rjmp	.+14     	; 0xaf4 <__stack+0x1f5>
 ae6:	60 81       	ld	r22, Z
 ae8:	71 81       	ldd	r23, Z+1	; 0x01
 aea:	82 81       	ldd	r24, Z+2	; 0x02
 aec:	93 81       	ldd	r25, Z+3	; 0x03
 aee:	0c 5f       	subi	r16, 0xFC	; 252
 af0:	1f 4f       	sbci	r17, 0xFF	; 255
 af2:	06 c0       	rjmp	.+12     	; 0xb00 <__stack+0x201>
 af4:	60 81       	ld	r22, Z
 af6:	71 81       	ldd	r23, Z+1	; 0x01
 af8:	80 e0       	ldi	r24, 0x00	; 0
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	0e 5f       	subi	r16, 0xFE	; 254
 afe:	1f 4f       	sbci	r17, 0xFF	; 255
 b00:	a3 01       	movw	r20, r6
 b02:	0e 94 65 06 	call	0xcca	; 0xcca <__ultoa_invert>
 b06:	88 2e       	mov	r8, r24
 b08:	86 18       	sub	r8, r6
 b0a:	fb 2d       	mov	r31, r11
 b0c:	ff 77       	andi	r31, 0x7F	; 127
 b0e:	3f 2e       	mov	r3, r31
 b10:	36 fe       	sbrs	r3, 6
 b12:	0d c0       	rjmp	.+26     	; 0xb2e <__stack+0x22f>
 b14:	23 2d       	mov	r18, r3
 b16:	2e 7f       	andi	r18, 0xFE	; 254
 b18:	a2 2e       	mov	r10, r18
 b1a:	89 14       	cp	r8, r9
 b1c:	58 f4       	brcc	.+22     	; 0xb34 <__stack+0x235>
 b1e:	34 fe       	sbrs	r3, 4
 b20:	0b c0       	rjmp	.+22     	; 0xb38 <__stack+0x239>
 b22:	32 fc       	sbrc	r3, 2
 b24:	09 c0       	rjmp	.+18     	; 0xb38 <__stack+0x239>
 b26:	83 2d       	mov	r24, r3
 b28:	8e 7e       	andi	r24, 0xEE	; 238
 b2a:	a8 2e       	mov	r10, r24
 b2c:	05 c0       	rjmp	.+10     	; 0xb38 <__stack+0x239>
 b2e:	b8 2c       	mov	r11, r8
 b30:	a3 2c       	mov	r10, r3
 b32:	03 c0       	rjmp	.+6      	; 0xb3a <__stack+0x23b>
 b34:	b8 2c       	mov	r11, r8
 b36:	01 c0       	rjmp	.+2      	; 0xb3a <__stack+0x23b>
 b38:	b9 2c       	mov	r11, r9
 b3a:	a4 fe       	sbrs	r10, 4
 b3c:	0f c0       	rjmp	.+30     	; 0xb5c <__stack+0x25d>
 b3e:	fe 01       	movw	r30, r28
 b40:	e8 0d       	add	r30, r8
 b42:	f1 1d       	adc	r31, r1
 b44:	80 81       	ld	r24, Z
 b46:	80 33       	cpi	r24, 0x30	; 48
 b48:	21 f4       	brne	.+8      	; 0xb52 <__stack+0x253>
 b4a:	9a 2d       	mov	r25, r10
 b4c:	99 7e       	andi	r25, 0xE9	; 233
 b4e:	a9 2e       	mov	r10, r25
 b50:	09 c0       	rjmp	.+18     	; 0xb64 <__stack+0x265>
 b52:	a2 fe       	sbrs	r10, 2
 b54:	06 c0       	rjmp	.+12     	; 0xb62 <__stack+0x263>
 b56:	b3 94       	inc	r11
 b58:	b3 94       	inc	r11
 b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__stack+0x265>
 b5c:	8a 2d       	mov	r24, r10
 b5e:	86 78       	andi	r24, 0x86	; 134
 b60:	09 f0       	breq	.+2      	; 0xb64 <__stack+0x265>
 b62:	b3 94       	inc	r11
 b64:	a3 fc       	sbrc	r10, 3
 b66:	11 c0       	rjmp	.+34     	; 0xb8a <__stack+0x28b>
 b68:	a0 fe       	sbrs	r10, 0
 b6a:	06 c0       	rjmp	.+12     	; 0xb78 <__stack+0x279>
 b6c:	b2 14       	cp	r11, r2
 b6e:	88 f4       	brcc	.+34     	; 0xb92 <__stack+0x293>
 b70:	28 0c       	add	r2, r8
 b72:	92 2c       	mov	r9, r2
 b74:	9b 18       	sub	r9, r11
 b76:	0e c0       	rjmp	.+28     	; 0xb94 <__stack+0x295>
 b78:	b2 14       	cp	r11, r2
 b7a:	60 f4       	brcc	.+24     	; 0xb94 <__stack+0x295>
 b7c:	b6 01       	movw	r22, r12
 b7e:	80 e2       	ldi	r24, 0x20	; 32
 b80:	90 e0       	ldi	r25, 0x00	; 0
 b82:	0e 94 29 06 	call	0xc52	; 0xc52 <fputc>
 b86:	b3 94       	inc	r11
 b88:	f7 cf       	rjmp	.-18     	; 0xb78 <__stack+0x279>
 b8a:	b2 14       	cp	r11, r2
 b8c:	18 f4       	brcc	.+6      	; 0xb94 <__stack+0x295>
 b8e:	2b 18       	sub	r2, r11
 b90:	02 c0       	rjmp	.+4      	; 0xb96 <__stack+0x297>
 b92:	98 2c       	mov	r9, r8
 b94:	21 2c       	mov	r2, r1
 b96:	a4 fe       	sbrs	r10, 4
 b98:	10 c0       	rjmp	.+32     	; 0xbba <__stack+0x2bb>
 b9a:	b6 01       	movw	r22, r12
 b9c:	80 e3       	ldi	r24, 0x30	; 48
 b9e:	90 e0       	ldi	r25, 0x00	; 0
 ba0:	0e 94 29 06 	call	0xc52	; 0xc52 <fputc>
 ba4:	a2 fe       	sbrs	r10, 2
 ba6:	17 c0       	rjmp	.+46     	; 0xbd6 <__stack+0x2d7>
 ba8:	a1 fc       	sbrc	r10, 1
 baa:	03 c0       	rjmp	.+6      	; 0xbb2 <__stack+0x2b3>
 bac:	88 e7       	ldi	r24, 0x78	; 120
 bae:	90 e0       	ldi	r25, 0x00	; 0
 bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <__stack+0x2b7>
 bb2:	88 e5       	ldi	r24, 0x58	; 88
 bb4:	90 e0       	ldi	r25, 0x00	; 0
 bb6:	b6 01       	movw	r22, r12
 bb8:	0c c0       	rjmp	.+24     	; 0xbd2 <__stack+0x2d3>
 bba:	8a 2d       	mov	r24, r10
 bbc:	86 78       	andi	r24, 0x86	; 134
 bbe:	59 f0       	breq	.+22     	; 0xbd6 <__stack+0x2d7>
 bc0:	a1 fe       	sbrs	r10, 1
 bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <__stack+0x2c9>
 bc4:	8b e2       	ldi	r24, 0x2B	; 43
 bc6:	01 c0       	rjmp	.+2      	; 0xbca <__stack+0x2cb>
 bc8:	80 e2       	ldi	r24, 0x20	; 32
 bca:	a7 fc       	sbrc	r10, 7
 bcc:	8d e2       	ldi	r24, 0x2D	; 45
 bce:	b6 01       	movw	r22, r12
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	0e 94 29 06 	call	0xc52	; 0xc52 <fputc>
 bd6:	89 14       	cp	r8, r9
 bd8:	38 f4       	brcc	.+14     	; 0xbe8 <__stack+0x2e9>
 bda:	b6 01       	movw	r22, r12
 bdc:	80 e3       	ldi	r24, 0x30	; 48
 bde:	90 e0       	ldi	r25, 0x00	; 0
 be0:	0e 94 29 06 	call	0xc52	; 0xc52 <fputc>
 be4:	9a 94       	dec	r9
 be6:	f7 cf       	rjmp	.-18     	; 0xbd6 <__stack+0x2d7>
 be8:	8a 94       	dec	r8
 bea:	f3 01       	movw	r30, r6
 bec:	e8 0d       	add	r30, r8
 bee:	f1 1d       	adc	r31, r1
 bf0:	80 81       	ld	r24, Z
 bf2:	b6 01       	movw	r22, r12
 bf4:	90 e0       	ldi	r25, 0x00	; 0
 bf6:	0e 94 29 06 	call	0xc52	; 0xc52 <fputc>
 bfa:	81 10       	cpse	r8, r1
 bfc:	f5 cf       	rjmp	.-22     	; 0xbe8 <__stack+0x2e9>
 bfe:	22 20       	and	r2, r2
 c00:	09 f4       	brne	.+2      	; 0xc04 <__stack+0x305>
 c02:	42 ce       	rjmp	.-892    	; 0x888 <vfprintf+0x24>
 c04:	b6 01       	movw	r22, r12
 c06:	80 e2       	ldi	r24, 0x20	; 32
 c08:	90 e0       	ldi	r25, 0x00	; 0
 c0a:	0e 94 29 06 	call	0xc52	; 0xc52 <fputc>
 c0e:	2a 94       	dec	r2
 c10:	f6 cf       	rjmp	.-20     	; 0xbfe <__stack+0x2ff>
 c12:	f6 01       	movw	r30, r12
 c14:	86 81       	ldd	r24, Z+6	; 0x06
 c16:	97 81       	ldd	r25, Z+7	; 0x07
 c18:	02 c0       	rjmp	.+4      	; 0xc1e <__stack+0x31f>
 c1a:	8f ef       	ldi	r24, 0xFF	; 255
 c1c:	9f ef       	ldi	r25, 0xFF	; 255
 c1e:	2b 96       	adiw	r28, 0x0b	; 11
 c20:	e2 e1       	ldi	r30, 0x12	; 18
 c22:	0c 94 df 06 	jmp	0xdbe	; 0xdbe <__epilogue_restores__>

00000c26 <strnlen_P>:
 c26:	fc 01       	movw	r30, r24
 c28:	05 90       	lpm	r0, Z+
 c2a:	61 50       	subi	r22, 0x01	; 1
 c2c:	70 40       	sbci	r23, 0x00	; 0
 c2e:	01 10       	cpse	r0, r1
 c30:	d8 f7       	brcc	.-10     	; 0xc28 <strnlen_P+0x2>
 c32:	80 95       	com	r24
 c34:	90 95       	com	r25
 c36:	8e 0f       	add	r24, r30
 c38:	9f 1f       	adc	r25, r31
 c3a:	08 95       	ret

00000c3c <strnlen>:
 c3c:	fc 01       	movw	r30, r24
 c3e:	61 50       	subi	r22, 0x01	; 1
 c40:	70 40       	sbci	r23, 0x00	; 0
 c42:	01 90       	ld	r0, Z+
 c44:	01 10       	cpse	r0, r1
 c46:	d8 f7       	brcc	.-10     	; 0xc3e <strnlen+0x2>
 c48:	80 95       	com	r24
 c4a:	90 95       	com	r25
 c4c:	8e 0f       	add	r24, r30
 c4e:	9f 1f       	adc	r25, r31
 c50:	08 95       	ret

00000c52 <fputc>:
 c52:	0f 93       	push	r16
 c54:	1f 93       	push	r17
 c56:	cf 93       	push	r28
 c58:	df 93       	push	r29
 c5a:	fb 01       	movw	r30, r22
 c5c:	23 81       	ldd	r18, Z+3	; 0x03
 c5e:	21 fd       	sbrc	r18, 1
 c60:	03 c0       	rjmp	.+6      	; 0xc68 <fputc+0x16>
 c62:	8f ef       	ldi	r24, 0xFF	; 255
 c64:	9f ef       	ldi	r25, 0xFF	; 255
 c66:	2c c0       	rjmp	.+88     	; 0xcc0 <fputc+0x6e>
 c68:	22 ff       	sbrs	r18, 2
 c6a:	16 c0       	rjmp	.+44     	; 0xc98 <fputc+0x46>
 c6c:	46 81       	ldd	r20, Z+6	; 0x06
 c6e:	57 81       	ldd	r21, Z+7	; 0x07
 c70:	24 81       	ldd	r18, Z+4	; 0x04
 c72:	35 81       	ldd	r19, Z+5	; 0x05
 c74:	42 17       	cp	r20, r18
 c76:	53 07       	cpc	r21, r19
 c78:	44 f4       	brge	.+16     	; 0xc8a <fputc+0x38>
 c7a:	a0 81       	ld	r26, Z
 c7c:	b1 81       	ldd	r27, Z+1	; 0x01
 c7e:	9d 01       	movw	r18, r26
 c80:	2f 5f       	subi	r18, 0xFF	; 255
 c82:	3f 4f       	sbci	r19, 0xFF	; 255
 c84:	31 83       	std	Z+1, r19	; 0x01
 c86:	20 83       	st	Z, r18
 c88:	8c 93       	st	X, r24
 c8a:	26 81       	ldd	r18, Z+6	; 0x06
 c8c:	37 81       	ldd	r19, Z+7	; 0x07
 c8e:	2f 5f       	subi	r18, 0xFF	; 255
 c90:	3f 4f       	sbci	r19, 0xFF	; 255
 c92:	37 83       	std	Z+7, r19	; 0x07
 c94:	26 83       	std	Z+6, r18	; 0x06
 c96:	14 c0       	rjmp	.+40     	; 0xcc0 <fputc+0x6e>
 c98:	8b 01       	movw	r16, r22
 c9a:	ec 01       	movw	r28, r24
 c9c:	fb 01       	movw	r30, r22
 c9e:	00 84       	ldd	r0, Z+8	; 0x08
 ca0:	f1 85       	ldd	r31, Z+9	; 0x09
 ca2:	e0 2d       	mov	r30, r0
 ca4:	09 95       	icall
 ca6:	89 2b       	or	r24, r25
 ca8:	e1 f6       	brne	.-72     	; 0xc62 <fputc+0x10>
 caa:	d8 01       	movw	r26, r16
 cac:	16 96       	adiw	r26, 0x06	; 6
 cae:	8d 91       	ld	r24, X+
 cb0:	9c 91       	ld	r25, X
 cb2:	17 97       	sbiw	r26, 0x07	; 7
 cb4:	01 96       	adiw	r24, 0x01	; 1
 cb6:	17 96       	adiw	r26, 0x07	; 7
 cb8:	9c 93       	st	X, r25
 cba:	8e 93       	st	-X, r24
 cbc:	16 97       	sbiw	r26, 0x06	; 6
 cbe:	ce 01       	movw	r24, r28
 cc0:	df 91       	pop	r29
 cc2:	cf 91       	pop	r28
 cc4:	1f 91       	pop	r17
 cc6:	0f 91       	pop	r16
 cc8:	08 95       	ret

00000cca <__ultoa_invert>:
 cca:	fa 01       	movw	r30, r20
 ccc:	aa 27       	eor	r26, r26
 cce:	28 30       	cpi	r18, 0x08	; 8
 cd0:	51 f1       	breq	.+84     	; 0xd26 <__ultoa_invert+0x5c>
 cd2:	20 31       	cpi	r18, 0x10	; 16
 cd4:	81 f1       	breq	.+96     	; 0xd36 <__ultoa_invert+0x6c>
 cd6:	e8 94       	clt
 cd8:	6f 93       	push	r22
 cda:	6e 7f       	andi	r22, 0xFE	; 254
 cdc:	6e 5f       	subi	r22, 0xFE	; 254
 cde:	7f 4f       	sbci	r23, 0xFF	; 255
 ce0:	8f 4f       	sbci	r24, 0xFF	; 255
 ce2:	9f 4f       	sbci	r25, 0xFF	; 255
 ce4:	af 4f       	sbci	r26, 0xFF	; 255
 ce6:	b1 e0       	ldi	r27, 0x01	; 1
 ce8:	3e d0       	rcall	.+124    	; 0xd66 <__ultoa_invert+0x9c>
 cea:	b4 e0       	ldi	r27, 0x04	; 4
 cec:	3c d0       	rcall	.+120    	; 0xd66 <__ultoa_invert+0x9c>
 cee:	67 0f       	add	r22, r23
 cf0:	78 1f       	adc	r23, r24
 cf2:	89 1f       	adc	r24, r25
 cf4:	9a 1f       	adc	r25, r26
 cf6:	a1 1d       	adc	r26, r1
 cf8:	68 0f       	add	r22, r24
 cfa:	79 1f       	adc	r23, r25
 cfc:	8a 1f       	adc	r24, r26
 cfe:	91 1d       	adc	r25, r1
 d00:	a1 1d       	adc	r26, r1
 d02:	6a 0f       	add	r22, r26
 d04:	71 1d       	adc	r23, r1
 d06:	81 1d       	adc	r24, r1
 d08:	91 1d       	adc	r25, r1
 d0a:	a1 1d       	adc	r26, r1
 d0c:	20 d0       	rcall	.+64     	; 0xd4e <__ultoa_invert+0x84>
 d0e:	09 f4       	brne	.+2      	; 0xd12 <__ultoa_invert+0x48>
 d10:	68 94       	set
 d12:	3f 91       	pop	r19
 d14:	2a e0       	ldi	r18, 0x0A	; 10
 d16:	26 9f       	mul	r18, r22
 d18:	11 24       	eor	r1, r1
 d1a:	30 19       	sub	r19, r0
 d1c:	30 5d       	subi	r19, 0xD0	; 208
 d1e:	31 93       	st	Z+, r19
 d20:	de f6       	brtc	.-74     	; 0xcd8 <__ultoa_invert+0xe>
 d22:	cf 01       	movw	r24, r30
 d24:	08 95       	ret
 d26:	46 2f       	mov	r20, r22
 d28:	47 70       	andi	r20, 0x07	; 7
 d2a:	40 5d       	subi	r20, 0xD0	; 208
 d2c:	41 93       	st	Z+, r20
 d2e:	b3 e0       	ldi	r27, 0x03	; 3
 d30:	0f d0       	rcall	.+30     	; 0xd50 <__ultoa_invert+0x86>
 d32:	c9 f7       	brne	.-14     	; 0xd26 <__ultoa_invert+0x5c>
 d34:	f6 cf       	rjmp	.-20     	; 0xd22 <__ultoa_invert+0x58>
 d36:	46 2f       	mov	r20, r22
 d38:	4f 70       	andi	r20, 0x0F	; 15
 d3a:	40 5d       	subi	r20, 0xD0	; 208
 d3c:	4a 33       	cpi	r20, 0x3A	; 58
 d3e:	18 f0       	brcs	.+6      	; 0xd46 <__ultoa_invert+0x7c>
 d40:	49 5d       	subi	r20, 0xD9	; 217
 d42:	31 fd       	sbrc	r19, 1
 d44:	40 52       	subi	r20, 0x20	; 32
 d46:	41 93       	st	Z+, r20
 d48:	02 d0       	rcall	.+4      	; 0xd4e <__ultoa_invert+0x84>
 d4a:	a9 f7       	brne	.-22     	; 0xd36 <__ultoa_invert+0x6c>
 d4c:	ea cf       	rjmp	.-44     	; 0xd22 <__ultoa_invert+0x58>
 d4e:	b4 e0       	ldi	r27, 0x04	; 4
 d50:	a6 95       	lsr	r26
 d52:	97 95       	ror	r25
 d54:	87 95       	ror	r24
 d56:	77 95       	ror	r23
 d58:	67 95       	ror	r22
 d5a:	ba 95       	dec	r27
 d5c:	c9 f7       	brne	.-14     	; 0xd50 <__ultoa_invert+0x86>
 d5e:	00 97       	sbiw	r24, 0x00	; 0
 d60:	61 05       	cpc	r22, r1
 d62:	71 05       	cpc	r23, r1
 d64:	08 95       	ret
 d66:	9b 01       	movw	r18, r22
 d68:	ac 01       	movw	r20, r24
 d6a:	0a 2e       	mov	r0, r26
 d6c:	06 94       	lsr	r0
 d6e:	57 95       	ror	r21
 d70:	47 95       	ror	r20
 d72:	37 95       	ror	r19
 d74:	27 95       	ror	r18
 d76:	ba 95       	dec	r27
 d78:	c9 f7       	brne	.-14     	; 0xd6c <__ultoa_invert+0xa2>
 d7a:	62 0f       	add	r22, r18
 d7c:	73 1f       	adc	r23, r19
 d7e:	84 1f       	adc	r24, r20
 d80:	95 1f       	adc	r25, r21
 d82:	a0 1d       	adc	r26, r0
 d84:	08 95       	ret

00000d86 <__prologue_saves__>:
 d86:	2f 92       	push	r2
 d88:	3f 92       	push	r3
 d8a:	4f 92       	push	r4
 d8c:	5f 92       	push	r5
 d8e:	6f 92       	push	r6
 d90:	7f 92       	push	r7
 d92:	8f 92       	push	r8
 d94:	9f 92       	push	r9
 d96:	af 92       	push	r10
 d98:	bf 92       	push	r11
 d9a:	cf 92       	push	r12
 d9c:	df 92       	push	r13
 d9e:	ef 92       	push	r14
 da0:	ff 92       	push	r15
 da2:	0f 93       	push	r16
 da4:	1f 93       	push	r17
 da6:	cf 93       	push	r28
 da8:	df 93       	push	r29
 daa:	cd b7       	in	r28, 0x3d	; 61
 dac:	de b7       	in	r29, 0x3e	; 62
 dae:	ca 1b       	sub	r28, r26
 db0:	db 0b       	sbc	r29, r27
 db2:	0f b6       	in	r0, 0x3f	; 63
 db4:	f8 94       	cli
 db6:	de bf       	out	0x3e, r29	; 62
 db8:	0f be       	out	0x3f, r0	; 63
 dba:	cd bf       	out	0x3d, r28	; 61
 dbc:	09 94       	ijmp

00000dbe <__epilogue_restores__>:
 dbe:	2a 88       	ldd	r2, Y+18	; 0x12
 dc0:	39 88       	ldd	r3, Y+17	; 0x11
 dc2:	48 88       	ldd	r4, Y+16	; 0x10
 dc4:	5f 84       	ldd	r5, Y+15	; 0x0f
 dc6:	6e 84       	ldd	r6, Y+14	; 0x0e
 dc8:	7d 84       	ldd	r7, Y+13	; 0x0d
 dca:	8c 84       	ldd	r8, Y+12	; 0x0c
 dcc:	9b 84       	ldd	r9, Y+11	; 0x0b
 dce:	aa 84       	ldd	r10, Y+10	; 0x0a
 dd0:	b9 84       	ldd	r11, Y+9	; 0x09
 dd2:	c8 84       	ldd	r12, Y+8	; 0x08
 dd4:	df 80       	ldd	r13, Y+7	; 0x07
 dd6:	ee 80       	ldd	r14, Y+6	; 0x06
 dd8:	fd 80       	ldd	r15, Y+5	; 0x05
 dda:	0c 81       	ldd	r16, Y+4	; 0x04
 ddc:	1b 81       	ldd	r17, Y+3	; 0x03
 dde:	aa 81       	ldd	r26, Y+2	; 0x02
 de0:	b9 81       	ldd	r27, Y+1	; 0x01
 de2:	ce 0f       	add	r28, r30
 de4:	d1 1d       	adc	r29, r1
 de6:	0f b6       	in	r0, 0x3f	; 63
 de8:	f8 94       	cli
 dea:	de bf       	out	0x3e, r29	; 62
 dec:	0f be       	out	0x3f, r0	; 63
 dee:	cd bf       	out	0x3d, r28	; 61
 df0:	ed 01       	movw	r28, r26
 df2:	08 95       	ret

00000df4 <_exit>:
 df4:	f8 94       	cli

00000df6 <__stop_program>:
 df6:	ff cf       	rjmp	.-2      	; 0xdf6 <__stop_program>
