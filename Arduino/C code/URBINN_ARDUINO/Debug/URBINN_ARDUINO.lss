
URBINN_ARDUINO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009c  00800100  00000b52  00000bc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b52  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000c62  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cc0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  00000d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000195b  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c75  00000000  00000000  000027a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c01  00000000  00000000  00003418  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003c8  00000000  00000000  0000401c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000063d  00000000  00000000  000043e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cda  00000000  00000000  00004a21  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  000056fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__vector_1>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e5       	ldi	r30, 0x52	; 82
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 39       	cpi	r26, 0x9C	; 156
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 74 02 	call	0x4e8	; 0x4e8 <main>
  8e:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <message_rx>:

								}
					}
				}

}
  96:	9f 92       	push	r9
  98:	af 92       	push	r10
  9a:	bf 92       	push	r11
  9c:	cf 92       	push	r12
  9e:	df 92       	push	r13
  a0:	ef 92       	push	r14
  a2:	ff 92       	push	r15
  a4:	0f 93       	push	r16
  a6:	1f 93       	push	r17
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
  b0:	2f 97       	sbiw	r28, 0x0f	; 15
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	f8 94       	cli
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	cd bf       	out	0x3d, r28	; 61
  bc:	ce 01       	movw	r24, r28
  be:	01 96       	adiw	r24, 0x01	; 1
  c0:	0e 94 a4 01 	call	0x348	; 0x348 <mcp2515_get_message>
  c4:	88 23       	and	r24, r24
  c6:	09 f4       	brne	.+2      	; 0xca <message_rx+0x34>
  c8:	6f c0       	rjmp	.+222    	; 0x1a8 <message_rx+0x112>
  ca:	84 e0       	ldi	r24, 0x04	; 4
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	0e 94 3a 02 	call	0x474	; 0x474 <print_string>
  d2:	8a 81       	ldd	r24, Y+2	; 0x02
  d4:	8f 93       	push	r24
  d6:	89 81       	ldd	r24, Y+1	; 0x01
  d8:	8f 93       	push	r24
  da:	0f 2e       	mov	r0, r31
  dc:	f9 e0       	ldi	r31, 0x09	; 9
  de:	ef 2e       	mov	r14, r31
  e0:	f1 e0       	ldi	r31, 0x01	; 1
  e2:	ff 2e       	mov	r15, r31
  e4:	f0 2d       	mov	r31, r0
  e6:	ff 92       	push	r15
  e8:	ef 92       	push	r14
  ea:	1f 92       	push	r1
  ec:	84 e0       	ldi	r24, 0x04	; 4
  ee:	8f 93       	push	r24
  f0:	8e 01       	movw	r16, r28
  f2:	04 5f       	subi	r16, 0xF4	; 244
  f4:	1f 4f       	sbci	r17, 0xFF	; 255
  f6:	1f 93       	push	r17
  f8:	0f 93       	push	r16
  fa:	0e 94 af 02 	call	0x55e	; 0x55e <snprintf>
  fe:	c8 01       	movw	r24, r16
 100:	0e 94 3a 02 	call	0x474	; 0x474 <print_string>
 104:	8f e0       	ldi	r24, 0x0F	; 15
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	0e 94 3a 02 	call	0x474	; 0x474 <print_string>
 10c:	82 e1       	ldi	r24, 0x12	; 18
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	0e 94 3a 02 	call	0x474	; 0x474 <print_string>
 114:	8a 81       	ldd	r24, Y+2	; 0x02
 116:	8f 93       	push	r24
 118:	89 81       	ldd	r24, Y+1	; 0x01
 11a:	8f 93       	push	r24
 11c:	ff 92       	push	r15
 11e:	ef 92       	push	r14
 120:	1f 92       	push	r1
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	8f 93       	push	r24
 126:	1f 93       	push	r17
 128:	0f 93       	push	r16
 12a:	0e 94 af 02 	call	0x55e	; 0x55e <snprintf>
 12e:	c8 01       	movw	r24, r16
 130:	0e 94 3a 02 	call	0x474	; 0x474 <print_string>
 134:	8f e1       	ldi	r24, 0x1F	; 31
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	0e 94 3a 02 	call	0x474	; 0x474 <print_string>
 13c:	8b 81       	ldd	r24, Y+3	; 0x03
 13e:	86 95       	lsr	r24
 140:	8f 70       	andi	r24, 0x0F	; 15
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	f8 94       	cli
 146:	de bf       	out	0x3e, r29	; 62
 148:	0f be       	out	0x3f, r0	; 63
 14a:	cd bf       	out	0x3d, r28	; 61
 14c:	49 f1       	breq	.+82     	; 0x1a0 <message_rx+0x10a>
 14e:	6e 01       	movw	r12, r28
 150:	34 e0       	ldi	r19, 0x04	; 4
 152:	c3 0e       	add	r12, r19
 154:	d1 1c       	adc	r13, r1
 156:	a1 2c       	mov	r10, r1
 158:	b1 2c       	mov	r11, r1
 15a:	0f 2e       	mov	r0, r31
 15c:	f3 e0       	ldi	r31, 0x03	; 3
 15e:	9f 2e       	mov	r9, r31
 160:	f0 2d       	mov	r31, r0
 162:	f6 01       	movw	r30, r12
 164:	81 91       	ld	r24, Z+
 166:	6f 01       	movw	r12, r30
 168:	1f 92       	push	r1
 16a:	8f 93       	push	r24
 16c:	ff 92       	push	r15
 16e:	ef 92       	push	r14
 170:	1f 92       	push	r1
 172:	9f 92       	push	r9
 174:	1f 93       	push	r17
 176:	0f 93       	push	r16
 178:	0e 94 af 02 	call	0x55e	; 0x55e <snprintf>
 17c:	c8 01       	movw	r24, r16
 17e:	0e 94 3a 02 	call	0x474	; 0x474 <print_string>
 182:	ff ef       	ldi	r31, 0xFF	; 255
 184:	af 1a       	sub	r10, r31
 186:	bf 0a       	sbc	r11, r31
 188:	8b 81       	ldd	r24, Y+3	; 0x03
 18a:	86 95       	lsr	r24
 18c:	8f 70       	andi	r24, 0x0F	; 15
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	f8 94       	cli
 194:	de bf       	out	0x3e, r29	; 62
 196:	0f be       	out	0x3f, r0	; 63
 198:	cd bf       	out	0x3d, r28	; 61
 19a:	a8 16       	cp	r10, r24
 19c:	b9 06       	cpc	r11, r25
 19e:	0c f3       	brlt	.-62     	; 0x162 <message_rx+0xcc>
 1a0:	81 e5       	ldi	r24, 0x51	; 81
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	0e 94 4f 02 	call	0x49e	; 0x49e <print_string_new_line>
 1a8:	2f 96       	adiw	r28, 0x0f	; 15
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	f8 94       	cli
 1ae:	de bf       	out	0x3e, r29	; 62
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	cd bf       	out	0x3d, r28	; 61
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	1f 91       	pop	r17
 1ba:	0f 91       	pop	r16
 1bc:	ff 90       	pop	r15
 1be:	ef 90       	pop	r14
 1c0:	df 90       	pop	r13
 1c2:	cf 90       	pop	r12
 1c4:	bf 90       	pop	r11
 1c6:	af 90       	pop	r10
 1c8:	9f 90       	pop	r9
 1ca:	08 95       	ret

000001cc <__vector_1>:
 1cc:	1f 92       	push	r1
 1ce:	0f 92       	push	r0
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	0f 92       	push	r0
 1d4:	11 24       	eor	r1, r1
 1d6:	2f 93       	push	r18
 1d8:	3f 93       	push	r19
 1da:	4f 93       	push	r20
 1dc:	5f 93       	push	r21
 1de:	6f 93       	push	r22
 1e0:	7f 93       	push	r23
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
 1e6:	af 93       	push	r26
 1e8:	bf 93       	push	r27
 1ea:	ef 93       	push	r30
 1ec:	ff 93       	push	r31
 1ee:	0e 94 4b 00 	call	0x96	; 0x96 <message_rx>
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	bf 91       	pop	r27
 1f8:	af 91       	pop	r26
 1fa:	9f 91       	pop	r25
 1fc:	8f 91       	pop	r24
 1fe:	7f 91       	pop	r23
 200:	6f 91       	pop	r22
 202:	5f 91       	pop	r21
 204:	4f 91       	pop	r20
 206:	3f 91       	pop	r19
 208:	2f 91       	pop	r18
 20a:	0f 90       	pop	r0
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	0f 90       	pop	r0
 210:	1f 90       	pop	r1
 212:	18 95       	reti

00000214 <CAN_INIT>:

char CAN_INIT(unsigned char speed) {
	cli(); // disable interrupts
 214:	f8 94       	cli

	// Set PD2 as input
	DDRD &= ~(1<<DDD3);
 216:	53 98       	cbi	0x0a, 3	; 10
	PORTD |= (1<<PORTD3);
 218:	5b 9a       	sbi	0x0b, 3	; 11

	// enable interrupt on PD2 (INT0) on the rising edge
	EICRA |= (1 << ISC10) | (1 << ISC11); // any logic
 21a:	e9 e6       	ldi	r30, 0x69	; 105
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	90 81       	ld	r25, Z
 220:	9c 60       	ori	r25, 0x0C	; 12
 222:	90 83       	st	Z, r25

	// enable INT0
	EIMSK |= (1 << INT0);
 224:	e8 9a       	sbi	0x1d, 0	; 29

	sei(); // enable interrupts
 226:	78 94       	sei

	// init the MCP2515
	return mcp2515_init(speed);
 228:	0e 94 58 01 	call	0x2b0	; 0x2b0 <mcp2515_init>
}
 22c:	08 95       	ret

0000022e <mcp2515_write_register>:
		// all buffers used
		return false;
	}

	return true;
}
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	d8 2f       	mov	r29, r24
 234:	c6 2f       	mov	r28, r22
 236:	2a 98       	cbi	0x05, 2	; 5
 238:	82 e0       	ldi	r24, 0x02	; 2
 23a:	0e 94 2a 02 	call	0x454	; 0x454 <spi_putc>
 23e:	8d 2f       	mov	r24, r29
 240:	0e 94 2a 02 	call	0x454	; 0x454 <spi_putc>
 244:	8c 2f       	mov	r24, r28
 246:	0e 94 2a 02 	call	0x454	; 0x454 <spi_putc>
 24a:	2a 9a       	sbi	0x05, 2	; 5
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <mcp2515_read_register>:
 252:	cf 93       	push	r28
 254:	c8 2f       	mov	r28, r24
 256:	2a 98       	cbi	0x05, 2	; 5
 258:	83 e0       	ldi	r24, 0x03	; 3
 25a:	0e 94 2a 02 	call	0x454	; 0x454 <spi_putc>
 25e:	8c 2f       	mov	r24, r28
 260:	0e 94 2a 02 	call	0x454	; 0x454 <spi_putc>
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	0e 94 2a 02 	call	0x454	; 0x454 <spi_putc>
 26a:	2a 9a       	sbi	0x05, 2	; 5
 26c:	cf 91       	pop	r28
 26e:	08 95       	ret

00000270 <mcp2515_bit_modify>:
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	18 2f       	mov	r17, r24
 278:	d6 2f       	mov	r29, r22
 27a:	c4 2f       	mov	r28, r20
 27c:	2a 98       	cbi	0x05, 2	; 5
 27e:	85 e0       	ldi	r24, 0x05	; 5
 280:	0e 94 2a 02 	call	0x454	; 0x454 <spi_putc>
 284:	81 2f       	mov	r24, r17
 286:	0e 94 2a 02 	call	0x454	; 0x454 <spi_putc>
 28a:	8d 2f       	mov	r24, r29
 28c:	0e 94 2a 02 	call	0x454	; 0x454 <spi_putc>
 290:	8c 2f       	mov	r24, r28
 292:	0e 94 2a 02 	call	0x454	; 0x454 <spi_putc>
 296:	2a 9a       	sbi	0x05, 2	; 5
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	1f 91       	pop	r17
 29e:	08 95       	ret

000002a0 <mcp2515_read_status>:
 2a0:	2a 98       	cbi	0x05, 2	; 5
 2a2:	0e 94 2a 02 	call	0x454	; 0x454 <spi_putc>
 2a6:	8f ef       	ldi	r24, 0xFF	; 255
 2a8:	0e 94 2a 02 	call	0x454	; 0x454 <spi_putc>
 2ac:	2a 9a       	sbi	0x05, 2	; 5
 2ae:	08 95       	ret

000002b0 <mcp2515_init>:
 2b0:	cf 93       	push	r28
 2b2:	c8 2f       	mov	r28, r24
 2b4:	2a 9a       	sbi	0x05, 2	; 5
 2b6:	22 9a       	sbi	0x04, 2	; 4
 2b8:	2d 98       	cbi	0x05, 5	; 5
 2ba:	2b 98       	cbi	0x05, 3	; 5
 2bc:	2c 98       	cbi	0x05, 4	; 5
 2be:	25 9a       	sbi	0x04, 5	; 4
 2c0:	23 9a       	sbi	0x04, 3	; 4
 2c2:	24 98       	cbi	0x04, 4	; 4
 2c4:	52 98       	cbi	0x0a, 2	; 10
 2c6:	5a 9a       	sbi	0x0b, 2	; 11
 2c8:	0e 94 24 02 	call	0x448	; 0x448 <spi_init_master>
 2cc:	2a 98       	cbi	0x05, 2	; 5
 2ce:	80 ec       	ldi	r24, 0xC0	; 192
 2d0:	0e 94 2a 02 	call	0x454	; 0x454 <spi_putc>
 2d4:	2a 9a       	sbi	0x05, 2	; 5
 2d6:	83 ec       	ldi	r24, 0xC3	; 195
 2d8:	99 e0       	ldi	r25, 0x09	; 9
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <mcp2515_init+0x2a>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <mcp2515_init+0x30>
 2e0:	00 00       	nop
 2e2:	2a 98       	cbi	0x05, 2	; 5
 2e4:	82 e0       	ldi	r24, 0x02	; 2
 2e6:	0e 94 2a 02 	call	0x454	; 0x454 <spi_putc>
 2ea:	88 e2       	ldi	r24, 0x28	; 40
 2ec:	0e 94 2a 02 	call	0x454	; 0x454 <spi_putc>
 2f0:	82 e0       	ldi	r24, 0x02	; 2
 2f2:	0e 94 2a 02 	call	0x454	; 0x454 <spi_putc>
 2f6:	80 e9       	ldi	r24, 0x90	; 144
 2f8:	0e 94 2a 02 	call	0x454	; 0x454 <spi_putc>
 2fc:	8c 2f       	mov	r24, r28
 2fe:	0e 94 2a 02 	call	0x454	; 0x454 <spi_putc>
 302:	83 e0       	ldi	r24, 0x03	; 3
 304:	0e 94 2a 02 	call	0x454	; 0x454 <spi_putc>
 308:	2a 9a       	sbi	0x05, 2	; 5
 30a:	8a e2       	ldi	r24, 0x2A	; 42
 30c:	0e 94 29 01 	call	0x252	; 0x252 <mcp2515_read_register>
 310:	c8 17       	cp	r28, r24
 312:	19 f0       	breq	.+6      	; 0x31a <mcp2515_init+0x6a>
 314:	28 9a       	sbi	0x05, 0	; 5
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	15 c0       	rjmp	.+42     	; 0x344 <mcp2515_init+0x94>
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	8c e0       	ldi	r24, 0x0C	; 12
 31e:	0e 94 17 01 	call	0x22e	; 0x22e <mcp2515_write_register>
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	8d e0       	ldi	r24, 0x0D	; 13
 326:	0e 94 17 01 	call	0x22e	; 0x22e <mcp2515_write_register>
 32a:	60 e6       	ldi	r22, 0x60	; 96
 32c:	80 e6       	ldi	r24, 0x60	; 96
 32e:	0e 94 17 01 	call	0x22e	; 0x22e <mcp2515_write_register>
 332:	60 e6       	ldi	r22, 0x60	; 96
 334:	80 e7       	ldi	r24, 0x70	; 112
 336:	0e 94 17 01 	call	0x22e	; 0x22e <mcp2515_write_register>
 33a:	60 e0       	ldi	r22, 0x00	; 0
 33c:	8f e0       	ldi	r24, 0x0F	; 15
 33e:	0e 94 17 01 	call	0x22e	; 0x22e <mcp2515_write_register>
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <mcp2515_get_message>:

// ----------------------------------------------------------------------------
uint8_t mcp2515_get_message(tCAN *message)
{
 348:	cf 92       	push	r12
 34a:	df 92       	push	r13
 34c:	ef 92       	push	r14
 34e:	ff 92       	push	r15
 350:	0f 93       	push	r16
 352:	1f 93       	push	r17
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	1f 92       	push	r1
 35a:	cd b7       	in	r28, 0x3d	; 61
 35c:	de b7       	in	r29, 0x3e	; 62
 35e:	6c 01       	movw	r12, r24
	// read status
	uint8_t status = mcp2515_read_status(SPI_RX_STATUS);
 360:	80 eb       	ldi	r24, 0xB0	; 176
 362:	0e 94 50 01 	call	0x2a0	; 0x2a0 <mcp2515_read_status>
 366:	89 83       	std	Y+1, r24	; 0x01
	uint8_t addr;
	uint8_t t;
	if (bit_is_set(status,6)) {
 368:	99 81       	ldd	r25, Y+1	; 0x01
 36a:	89 2f       	mov	r24, r25
 36c:	80 74       	andi	r24, 0x40	; 64
 36e:	96 fd       	sbrc	r25, 6
 370:	06 c0       	rjmp	.+12     	; 0x37e <mcp2515_get_message+0x36>
		// message in buffer 0
		addr = SPI_READ_RX;
	}
	else if (bit_is_set(status,7)) {
 372:	99 81       	ldd	r25, Y+1	; 0x01
 374:	99 23       	and	r25, r25
 376:	0c f0       	brlt	.+2      	; 0x37a <mcp2515_get_message+0x32>
 378:	5d c0       	rjmp	.+186    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		// message in buffer 1
		addr = SPI_READ_RX | 0x04;
 37a:	84 e9       	ldi	r24, 0x94	; 148
 37c:	01 c0       	rjmp	.+2      	; 0x380 <mcp2515_get_message+0x38>
	uint8_t status = mcp2515_read_status(SPI_RX_STATUS);
	uint8_t addr;
	uint8_t t;
	if (bit_is_set(status,6)) {
		// message in buffer 0
		addr = SPI_READ_RX;
 37e:	80 e9       	ldi	r24, 0x90	; 144
	else {
		// Error: no message available
		return 0;
	}

	RESET(MCP2515_CS);
 380:	2a 98       	cbi	0x05, 2	; 5
	spi_putc(addr);
 382:	0e 94 2a 02 	call	0x454	; 0x454 <spi_putc>

	// read id
	message->id  = (uint16_t) spi_putc(0xff) << 3;
 386:	8f ef       	ldi	r24, 0xFF	; 255
 388:	0e 94 2a 02 	call	0x454	; 0x454 <spi_putc>
 38c:	28 e0       	ldi	r18, 0x08	; 8
 38e:	82 9f       	mul	r24, r18
 390:	c0 01       	movw	r24, r0
 392:	11 24       	eor	r1, r1
 394:	f6 01       	movw	r30, r12
 396:	91 83       	std	Z+1, r25	; 0x01
 398:	80 83       	st	Z, r24
	message->id |=            spi_putc(0xff) >> 5;
 39a:	8f ef       	ldi	r24, 0xFF	; 255
 39c:	0e 94 2a 02 	call	0x454	; 0x454 <spi_putc>
 3a0:	28 2f       	mov	r18, r24
 3a2:	22 95       	swap	r18
 3a4:	26 95       	lsr	r18
 3a6:	27 70       	andi	r18, 0x07	; 7
 3a8:	f6 01       	movw	r30, r12
 3aa:	80 81       	ld	r24, Z
 3ac:	91 81       	ldd	r25, Z+1	; 0x01
 3ae:	82 2b       	or	r24, r18
 3b0:	91 83       	std	Z+1, r25	; 0x01
 3b2:	80 83       	st	Z, r24

	spi_putc(0xff);
 3b4:	8f ef       	ldi	r24, 0xFF	; 255
 3b6:	0e 94 2a 02 	call	0x454	; 0x454 <spi_putc>
	spi_putc(0xff);
 3ba:	8f ef       	ldi	r24, 0xFF	; 255
 3bc:	0e 94 2a 02 	call	0x454	; 0x454 <spi_putc>

	// read DLC
	uint8_t length = spi_putc(0xff) & 0x0f;
 3c0:	8f ef       	ldi	r24, 0xFF	; 255
 3c2:	0e 94 2a 02 	call	0x454	; 0x454 <spi_putc>
 3c6:	8f 70       	andi	r24, 0x0F	; 15

	message->header.length = length;
 3c8:	28 2f       	mov	r18, r24
 3ca:	22 0f       	add	r18, r18
 3cc:	f6 01       	movw	r30, r12
 3ce:	92 81       	ldd	r25, Z+2	; 0x02
 3d0:	91 7e       	andi	r25, 0xE1	; 225
 3d2:	92 2b       	or	r25, r18
 3d4:	92 83       	std	Z+2, r25	; 0x02
	message->header.rtr = (bit_is_set(status, 3)) ? 1 : 0;
 3d6:	29 81       	ldd	r18, Y+1	; 0x01
 3d8:	23 fb       	bst	r18, 3
 3da:	22 27       	eor	r18, r18
 3dc:	20 f9       	bld	r18, 0
 3de:	20 fb       	bst	r18, 0
 3e0:	90 f9       	bld	r25, 0
 3e2:	92 83       	std	Z+2, r25	; 0x02

	// read data
	for (t=0;t<length;t++) {
 3e4:	88 23       	and	r24, r24
 3e6:	a1 f0       	breq	.+40     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3e8:	86 01       	movw	r16, r12
 3ea:	0d 5f       	subi	r16, 0xFD	; 253
 3ec:	1f 4f       	sbci	r17, 0xFF	; 255
 3ee:	81 50       	subi	r24, 0x01	; 1
 3f0:	e8 2e       	mov	r14, r24
 3f2:	f1 2c       	mov	r15, r1
 3f4:	f4 e0       	ldi	r31, 0x04	; 4
 3f6:	ef 0e       	add	r14, r31
 3f8:	f1 1c       	adc	r15, r1
 3fa:	ec 0c       	add	r14, r12
 3fc:	fd 1c       	adc	r15, r13
		message->data[t] = spi_putc(0xff);
 3fe:	8f ef       	ldi	r24, 0xFF	; 255
 400:	0e 94 2a 02 	call	0x454	; 0x454 <spi_putc>
 404:	f8 01       	movw	r30, r16
 406:	81 93       	st	Z+, r24
 408:	8f 01       	movw	r16, r30

	message->header.length = length;
	message->header.rtr = (bit_is_set(status, 3)) ? 1 : 0;

	// read data
	for (t=0;t<length;t++) {
 40a:	ee 15       	cp	r30, r14
 40c:	ff 05       	cpc	r31, r15
 40e:	b9 f7       	brne	.-18     	; 0x3fe <mcp2515_get_message+0xb6>
		message->data[t] = spi_putc(0xff);
	}
	SET(MCP2515_CS);
 410:	2a 9a       	sbi	0x05, 2	; 5

	// clear interrupt flag
	if (bit_is_set(status, 6)) {
 412:	89 81       	ldd	r24, Y+1	; 0x01
 414:	86 ff       	sbrs	r24, 6
 416:	06 c0       	rjmp	.+12     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		mcp2515_bit_modify(CANINTF, (1<<RX0IF), 0);
 418:	40 e0       	ldi	r20, 0x00	; 0
 41a:	61 e0       	ldi	r22, 0x01	; 1
 41c:	8c e2       	ldi	r24, 0x2C	; 44
 41e:	0e 94 38 01 	call	0x270	; 0x270 <mcp2515_bit_modify>
 422:	05 c0       	rjmp	.+10     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
	}
	else {
		mcp2515_bit_modify(CANINTF, (1<<RX1IF), 0);
 424:	40 e0       	ldi	r20, 0x00	; 0
 426:	62 e0       	ldi	r22, 0x02	; 2
 428:	8c e2       	ldi	r24, 0x2C	; 44
 42a:	0e 94 38 01 	call	0x270	; 0x270 <mcp2515_bit_modify>
	}

	return (status & 0x07) + 1;
 42e:	89 81       	ldd	r24, Y+1	; 0x01
 430:	87 70       	andi	r24, 0x07	; 7
 432:	8f 5f       	subi	r24, 0xFF	; 255
}
 434:	0f 90       	pop	r0
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	1f 91       	pop	r17
 43c:	0f 91       	pop	r16
 43e:	ff 90       	pop	r15
 440:	ef 90       	pop	r14
 442:	df 90       	pop	r13
 444:	cf 90       	pop	r12
 446:	08 95       	ret

00000448 <spi_init_master>:

#include "avr/io.h"

//Initialize SPI Master Device
void spi_init_master() {
	DDRB |= (1<<5)|(1<<3);              //Set MOSI, SCK as Output
 448:	84 b1       	in	r24, 0x04	; 4
 44a:	88 62       	ori	r24, 0x28	; 40
 44c:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0); //Enable SPI, Set as Master
 44e:	81 e5       	ldi	r24, 0x51	; 81
 450:	8c bd       	out	0x2c, r24	; 44
 452:	08 95       	ret

00000454 <spi_putc>:
	//Prescaler: Fosc/16, Enable Interrupts
}

//Function to send and receive data
uint8_t spi_putc( uint8_t data ) {
	SPDR = data;                       //Load data into the buffer
 454:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF) ));       //Wait until transmission complete
 456:	0d b4       	in	r0, 0x2d	; 45
 458:	07 fe       	sbrs	r0, 7
 45a:	fd cf       	rjmp	.-6      	; 0x456 <spi_putc+0x2>
	return(SPDR);                      //Return received data
 45c:	8e b5       	in	r24, 0x2e	; 46
 45e:	08 95       	ret

00000460 <USART_transmit>:
}

void print_int_new_line(int32_t data) {
	print_int(data);

	print_new_line();
 460:	dc 01       	movw	r26, r24
 462:	e0 ec       	ldi	r30, 0xC0	; 192
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	90 81       	ld	r25, Z
 468:	95 ff       	sbrs	r25, 5
 46a:	fd cf       	rjmp	.-6      	; 0x466 <USART_transmit+0x6>
 46c:	8c 91       	ld	r24, X
 46e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 472:	08 95       	ret

00000474 <print_string>:
 474:	cf 93       	push	r28
 476:	df 93       	push	r29
 478:	ec 01       	movw	r28, r24
 47a:	88 81       	ld	r24, Y
 47c:	88 23       	and	r24, r24
 47e:	39 f0       	breq	.+14     	; 0x48e <print_string+0x1a>
 480:	ce 01       	movw	r24, r28
 482:	0e 94 30 02 	call	0x460	; 0x460 <USART_transmit>
 486:	21 96       	adiw	r28, 0x01	; 1
 488:	88 81       	ld	r24, Y
 48a:	81 11       	cpse	r24, r1
 48c:	f9 cf       	rjmp	.-14     	; 0x480 <print_string+0xc>
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	08 95       	ret

00000494 <print_new_line>:
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	91 e0       	ldi	r25, 0x01	; 1
 498:	0e 94 3a 02 	call	0x474	; 0x474 <print_string>
 49c:	08 95       	ret

0000049e <print_string_new_line>:
		USART_transmit(data);
	}
}

void print_string_new_line(char * data) {
	print_string(data);
 49e:	0e 94 3a 02 	call	0x474	; 0x474 <print_string>

	print_new_line();
 4a2:	0e 94 4a 02 	call	0x494	; 0x494 <print_new_line>
 4a6:	08 95       	ret

000004a8 <USART_init>:
 *
 * \param baudrate the baudrate the USART will run on
 *
 * \return void
 */
void USART_init(uint32_t baudrate){
 4a8:	9b 01       	movw	r18, r22
 4aa:	ac 01       	movw	r20, r24

	// calculate the baudrate, see the datasheet for more information
	uint16_t baud_setting = (F_CPU / 8 / baudrate - 1) ;
 4ac:	60 e8       	ldi	r22, 0x80	; 128
 4ae:	74 e8       	ldi	r23, 0x84	; 132
 4b0:	8e e1       	ldi	r24, 0x1E	; 30
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	0e 94 8d 02 	call	0x51a	; 0x51a <__udivmodsi4>
 4b8:	21 50       	subi	r18, 0x01	; 1
 4ba:	31 09       	sbc	r19, r1

	// assign the baud_setting
	UBRR0H = baud_setting >> 8;
 4bc:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = baud_setting;
 4c0:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	// set double data speed
	UCSR0A = (1<<U2X0);
 4c4:	82 e0       	ldi	r24, 0x02	; 2
 4c6:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>

	// enable TX and RX (RX is not necessary)
	UCSR0B |= _BV(RXEN0) | _BV(TXEN0);
 4ca:	e1 ec       	ldi	r30, 0xC1	; 193
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	80 81       	ld	r24, Z
 4d0:	88 61       	ori	r24, 0x18	; 24
 4d2:	80 83       	st	Z, r24

	// 8 bit data, 1 stop, no parity
	UCSR0C |= _BV(UCSZ01) | _BV(UCSZ00);
 4d4:	e2 ec       	ldi	r30, 0xC2	; 194
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	80 81       	ld	r24, Z
 4da:	86 60       	ori	r24, 0x06	; 6
 4dc:	80 83       	st	Z, r24


	// confirm the init
	print_string_new_line("USART INIT DONE");
 4de:	82 e5       	ldi	r24, 0x52	; 82
 4e0:	91 e0       	ldi	r25, 0x01	; 1
 4e2:	0e 94 4f 02 	call	0x49e	; 0x49e <print_string_new_line>
 4e6:	08 95       	ret

000004e8 <main>:

#include <stdio.h>

int main() {
	// start the serial connection with the PC
	USART_init(USART_BAUDRATE);
 4e8:	60 e0       	ldi	r22, 0x00	; 0
 4ea:	76 e9       	ldi	r23, 0x96	; 150
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	0e 94 54 02 	call	0x4a8	; 0x4a8 <USART_init>

	// start the CAN connection
	if (CAN_INIT(CANSPEED_500)){
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	0e 94 0a 01 	call	0x214	; 0x214 <CAN_INIT>
 4fa:	88 23       	and	r24, r24
 4fc:	29 f0       	breq	.+10     	; 0x508 <main+0x20>
		DEBUG_USART("CAN init succes");
 4fe:	86 e6       	ldi	r24, 0x66	; 102
 500:	91 e0       	ldi	r25, 0x01	; 1
 502:	0e 94 4f 02 	call	0x49e	; 0x49e <print_string_new_line>
 506:	04 c0       	rjmp	.+8      	; 0x510 <main+0x28>
	} else {
		DEBUG_USART("CAN init failed");
 508:	86 e7       	ldi	r24, 0x76	; 118
 50a:	91 e0       	ldi	r25, 0x01	; 1
 50c:	0e 94 4f 02 	call	0x49e	; 0x49e <print_string_new_line>
	}

	DEBUG_USART("Starting main loop...");
 510:	86 e8       	ldi	r24, 0x86	; 134
 512:	91 e0       	ldi	r25, 0x01	; 1
 514:	0e 94 4f 02 	call	0x49e	; 0x49e <print_string_new_line>
 518:	ff cf       	rjmp	.-2      	; 0x518 <main+0x30>

0000051a <__udivmodsi4>:
 51a:	a1 e2       	ldi	r26, 0x21	; 33
 51c:	1a 2e       	mov	r1, r26
 51e:	aa 1b       	sub	r26, r26
 520:	bb 1b       	sub	r27, r27
 522:	fd 01       	movw	r30, r26
 524:	0d c0       	rjmp	.+26     	; 0x540 <__udivmodsi4_ep>

00000526 <__udivmodsi4_loop>:
 526:	aa 1f       	adc	r26, r26
 528:	bb 1f       	adc	r27, r27
 52a:	ee 1f       	adc	r30, r30
 52c:	ff 1f       	adc	r31, r31
 52e:	a2 17       	cp	r26, r18
 530:	b3 07       	cpc	r27, r19
 532:	e4 07       	cpc	r30, r20
 534:	f5 07       	cpc	r31, r21
 536:	20 f0       	brcs	.+8      	; 0x540 <__udivmodsi4_ep>
 538:	a2 1b       	sub	r26, r18
 53a:	b3 0b       	sbc	r27, r19
 53c:	e4 0b       	sbc	r30, r20
 53e:	f5 0b       	sbc	r31, r21

00000540 <__udivmodsi4_ep>:
 540:	66 1f       	adc	r22, r22
 542:	77 1f       	adc	r23, r23
 544:	88 1f       	adc	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	1a 94       	dec	r1
 54a:	69 f7       	brne	.-38     	; 0x526 <__udivmodsi4_loop>
 54c:	60 95       	com	r22
 54e:	70 95       	com	r23
 550:	80 95       	com	r24
 552:	90 95       	com	r25
 554:	9b 01       	movw	r18, r22
 556:	ac 01       	movw	r20, r24
 558:	bd 01       	movw	r22, r26
 55a:	cf 01       	movw	r24, r30
 55c:	08 95       	ret

0000055e <snprintf>:
 55e:	ae e0       	ldi	r26, 0x0E	; 14
 560:	b0 e0       	ldi	r27, 0x00	; 0
 562:	e5 eb       	ldi	r30, 0xB5	; 181
 564:	f2 e0       	ldi	r31, 0x02	; 2
 566:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__prologue_saves__+0x1c>
 56a:	0d 89       	ldd	r16, Y+21	; 0x15
 56c:	1e 89       	ldd	r17, Y+22	; 0x16
 56e:	8f 89       	ldd	r24, Y+23	; 0x17
 570:	98 8d       	ldd	r25, Y+24	; 0x18
 572:	26 e0       	ldi	r18, 0x06	; 6
 574:	2c 83       	std	Y+4, r18	; 0x04
 576:	1a 83       	std	Y+2, r17	; 0x02
 578:	09 83       	std	Y+1, r16	; 0x01
 57a:	97 ff       	sbrs	r25, 7
 57c:	02 c0       	rjmp	.+4      	; 0x582 <snprintf+0x24>
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	90 e8       	ldi	r25, 0x80	; 128
 582:	01 97       	sbiw	r24, 0x01	; 1
 584:	9e 83       	std	Y+6, r25	; 0x06
 586:	8d 83       	std	Y+5, r24	; 0x05
 588:	ae 01       	movw	r20, r28
 58a:	45 5e       	subi	r20, 0xE5	; 229
 58c:	5f 4f       	sbci	r21, 0xFF	; 255
 58e:	69 8d       	ldd	r22, Y+25	; 0x19
 590:	7a 8d       	ldd	r23, Y+26	; 0x1a
 592:	ce 01       	movw	r24, r28
 594:	01 96       	adiw	r24, 0x01	; 1
 596:	0e 94 df 02 	call	0x5be	; 0x5be <vfprintf>
 59a:	4d 81       	ldd	r20, Y+5	; 0x05
 59c:	5e 81       	ldd	r21, Y+6	; 0x06
 59e:	57 fd       	sbrc	r21, 7
 5a0:	0a c0       	rjmp	.+20     	; 0x5b6 <snprintf+0x58>
 5a2:	2f 81       	ldd	r18, Y+7	; 0x07
 5a4:	38 85       	ldd	r19, Y+8	; 0x08
 5a6:	42 17       	cp	r20, r18
 5a8:	53 07       	cpc	r21, r19
 5aa:	0c f4       	brge	.+2      	; 0x5ae <snprintf+0x50>
 5ac:	9a 01       	movw	r18, r20
 5ae:	f8 01       	movw	r30, r16
 5b0:	e2 0f       	add	r30, r18
 5b2:	f3 1f       	adc	r31, r19
 5b4:	10 82       	st	Z, r1
 5b6:	2e 96       	adiw	r28, 0x0e	; 14
 5b8:	e4 e0       	ldi	r30, 0x04	; 4
 5ba:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__epilogue_restores__+0x1c>

000005be <vfprintf>:
 5be:	ab e0       	ldi	r26, 0x0B	; 11
 5c0:	b0 e0       	ldi	r27, 0x00	; 0
 5c2:	e5 ee       	ldi	r30, 0xE5	; 229
 5c4:	f2 e0       	ldi	r31, 0x02	; 2
 5c6:	0c 94 70 05 	jmp	0xae0	; 0xae0 <__prologue_saves__>
 5ca:	6c 01       	movw	r12, r24
 5cc:	7b 01       	movw	r14, r22
 5ce:	8a 01       	movw	r16, r20
 5d0:	fc 01       	movw	r30, r24
 5d2:	17 82       	std	Z+7, r1	; 0x07
 5d4:	16 82       	std	Z+6, r1	; 0x06
 5d6:	83 81       	ldd	r24, Z+3	; 0x03
 5d8:	81 ff       	sbrs	r24, 1
 5da:	cc c1       	rjmp	.+920    	; 0x974 <__stack+0x75>
 5dc:	ce 01       	movw	r24, r28
 5de:	01 96       	adiw	r24, 0x01	; 1
 5e0:	3c 01       	movw	r6, r24
 5e2:	f6 01       	movw	r30, r12
 5e4:	93 81       	ldd	r25, Z+3	; 0x03
 5e6:	f7 01       	movw	r30, r14
 5e8:	93 fd       	sbrc	r25, 3
 5ea:	85 91       	lpm	r24, Z+
 5ec:	93 ff       	sbrs	r25, 3
 5ee:	81 91       	ld	r24, Z+
 5f0:	7f 01       	movw	r14, r30
 5f2:	88 23       	and	r24, r24
 5f4:	09 f4       	brne	.+2      	; 0x5f8 <vfprintf+0x3a>
 5f6:	ba c1       	rjmp	.+884    	; 0x96c <__stack+0x6d>
 5f8:	85 32       	cpi	r24, 0x25	; 37
 5fa:	39 f4       	brne	.+14     	; 0x60a <vfprintf+0x4c>
 5fc:	93 fd       	sbrc	r25, 3
 5fe:	85 91       	lpm	r24, Z+
 600:	93 ff       	sbrs	r25, 3
 602:	81 91       	ld	r24, Z+
 604:	7f 01       	movw	r14, r30
 606:	85 32       	cpi	r24, 0x25	; 37
 608:	29 f4       	brne	.+10     	; 0x614 <vfprintf+0x56>
 60a:	b6 01       	movw	r22, r12
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	0e 94 d6 04 	call	0x9ac	; 0x9ac <fputc>
 612:	e7 cf       	rjmp	.-50     	; 0x5e2 <vfprintf+0x24>
 614:	91 2c       	mov	r9, r1
 616:	21 2c       	mov	r2, r1
 618:	31 2c       	mov	r3, r1
 61a:	ff e1       	ldi	r31, 0x1F	; 31
 61c:	f3 15       	cp	r31, r3
 61e:	d8 f0       	brcs	.+54     	; 0x656 <vfprintf+0x98>
 620:	8b 32       	cpi	r24, 0x2B	; 43
 622:	79 f0       	breq	.+30     	; 0x642 <vfprintf+0x84>
 624:	38 f4       	brcc	.+14     	; 0x634 <vfprintf+0x76>
 626:	80 32       	cpi	r24, 0x20	; 32
 628:	79 f0       	breq	.+30     	; 0x648 <vfprintf+0x8a>
 62a:	83 32       	cpi	r24, 0x23	; 35
 62c:	a1 f4       	brne	.+40     	; 0x656 <vfprintf+0x98>
 62e:	23 2d       	mov	r18, r3
 630:	20 61       	ori	r18, 0x10	; 16
 632:	1d c0       	rjmp	.+58     	; 0x66e <vfprintf+0xb0>
 634:	8d 32       	cpi	r24, 0x2D	; 45
 636:	61 f0       	breq	.+24     	; 0x650 <vfprintf+0x92>
 638:	80 33       	cpi	r24, 0x30	; 48
 63a:	69 f4       	brne	.+26     	; 0x656 <vfprintf+0x98>
 63c:	23 2d       	mov	r18, r3
 63e:	21 60       	ori	r18, 0x01	; 1
 640:	16 c0       	rjmp	.+44     	; 0x66e <vfprintf+0xb0>
 642:	83 2d       	mov	r24, r3
 644:	82 60       	ori	r24, 0x02	; 2
 646:	38 2e       	mov	r3, r24
 648:	e3 2d       	mov	r30, r3
 64a:	e4 60       	ori	r30, 0x04	; 4
 64c:	3e 2e       	mov	r3, r30
 64e:	2a c0       	rjmp	.+84     	; 0x6a4 <vfprintf+0xe6>
 650:	f3 2d       	mov	r31, r3
 652:	f8 60       	ori	r31, 0x08	; 8
 654:	1d c0       	rjmp	.+58     	; 0x690 <vfprintf+0xd2>
 656:	37 fc       	sbrc	r3, 7
 658:	2d c0       	rjmp	.+90     	; 0x6b4 <vfprintf+0xf6>
 65a:	20 ed       	ldi	r18, 0xD0	; 208
 65c:	28 0f       	add	r18, r24
 65e:	2a 30       	cpi	r18, 0x0A	; 10
 660:	40 f0       	brcs	.+16     	; 0x672 <vfprintf+0xb4>
 662:	8e 32       	cpi	r24, 0x2E	; 46
 664:	b9 f4       	brne	.+46     	; 0x694 <vfprintf+0xd6>
 666:	36 fc       	sbrc	r3, 6
 668:	81 c1       	rjmp	.+770    	; 0x96c <__stack+0x6d>
 66a:	23 2d       	mov	r18, r3
 66c:	20 64       	ori	r18, 0x40	; 64
 66e:	32 2e       	mov	r3, r18
 670:	19 c0       	rjmp	.+50     	; 0x6a4 <vfprintf+0xe6>
 672:	36 fe       	sbrs	r3, 6
 674:	06 c0       	rjmp	.+12     	; 0x682 <vfprintf+0xc4>
 676:	8a e0       	ldi	r24, 0x0A	; 10
 678:	98 9e       	mul	r9, r24
 67a:	20 0d       	add	r18, r0
 67c:	11 24       	eor	r1, r1
 67e:	92 2e       	mov	r9, r18
 680:	11 c0       	rjmp	.+34     	; 0x6a4 <vfprintf+0xe6>
 682:	ea e0       	ldi	r30, 0x0A	; 10
 684:	2e 9e       	mul	r2, r30
 686:	20 0d       	add	r18, r0
 688:	11 24       	eor	r1, r1
 68a:	22 2e       	mov	r2, r18
 68c:	f3 2d       	mov	r31, r3
 68e:	f0 62       	ori	r31, 0x20	; 32
 690:	3f 2e       	mov	r3, r31
 692:	08 c0       	rjmp	.+16     	; 0x6a4 <vfprintf+0xe6>
 694:	8c 36       	cpi	r24, 0x6C	; 108
 696:	21 f4       	brne	.+8      	; 0x6a0 <vfprintf+0xe2>
 698:	83 2d       	mov	r24, r3
 69a:	80 68       	ori	r24, 0x80	; 128
 69c:	38 2e       	mov	r3, r24
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <vfprintf+0xe6>
 6a0:	88 36       	cpi	r24, 0x68	; 104
 6a2:	41 f4       	brne	.+16     	; 0x6b4 <vfprintf+0xf6>
 6a4:	f7 01       	movw	r30, r14
 6a6:	93 fd       	sbrc	r25, 3
 6a8:	85 91       	lpm	r24, Z+
 6aa:	93 ff       	sbrs	r25, 3
 6ac:	81 91       	ld	r24, Z+
 6ae:	7f 01       	movw	r14, r30
 6b0:	81 11       	cpse	r24, r1
 6b2:	b3 cf       	rjmp	.-154    	; 0x61a <vfprintf+0x5c>
 6b4:	98 2f       	mov	r25, r24
 6b6:	9f 7d       	andi	r25, 0xDF	; 223
 6b8:	95 54       	subi	r25, 0x45	; 69
 6ba:	93 30       	cpi	r25, 0x03	; 3
 6bc:	28 f4       	brcc	.+10     	; 0x6c8 <vfprintf+0x10a>
 6be:	0c 5f       	subi	r16, 0xFC	; 252
 6c0:	1f 4f       	sbci	r17, 0xFF	; 255
 6c2:	9f e3       	ldi	r25, 0x3F	; 63
 6c4:	99 83       	std	Y+1, r25	; 0x01
 6c6:	0d c0       	rjmp	.+26     	; 0x6e2 <vfprintf+0x124>
 6c8:	83 36       	cpi	r24, 0x63	; 99
 6ca:	31 f0       	breq	.+12     	; 0x6d8 <vfprintf+0x11a>
 6cc:	83 37       	cpi	r24, 0x73	; 115
 6ce:	71 f0       	breq	.+28     	; 0x6ec <vfprintf+0x12e>
 6d0:	83 35       	cpi	r24, 0x53	; 83
 6d2:	09 f0       	breq	.+2      	; 0x6d6 <vfprintf+0x118>
 6d4:	59 c0       	rjmp	.+178    	; 0x788 <vfprintf+0x1ca>
 6d6:	21 c0       	rjmp	.+66     	; 0x71a <vfprintf+0x15c>
 6d8:	f8 01       	movw	r30, r16
 6da:	80 81       	ld	r24, Z
 6dc:	89 83       	std	Y+1, r24	; 0x01
 6de:	0e 5f       	subi	r16, 0xFE	; 254
 6e0:	1f 4f       	sbci	r17, 0xFF	; 255
 6e2:	88 24       	eor	r8, r8
 6e4:	83 94       	inc	r8
 6e6:	91 2c       	mov	r9, r1
 6e8:	53 01       	movw	r10, r6
 6ea:	13 c0       	rjmp	.+38     	; 0x712 <vfprintf+0x154>
 6ec:	28 01       	movw	r4, r16
 6ee:	f2 e0       	ldi	r31, 0x02	; 2
 6f0:	4f 0e       	add	r4, r31
 6f2:	51 1c       	adc	r5, r1
 6f4:	f8 01       	movw	r30, r16
 6f6:	a0 80       	ld	r10, Z
 6f8:	b1 80       	ldd	r11, Z+1	; 0x01
 6fa:	36 fe       	sbrs	r3, 6
 6fc:	03 c0       	rjmp	.+6      	; 0x704 <vfprintf+0x146>
 6fe:	69 2d       	mov	r22, r9
 700:	70 e0       	ldi	r23, 0x00	; 0
 702:	02 c0       	rjmp	.+4      	; 0x708 <vfprintf+0x14a>
 704:	6f ef       	ldi	r22, 0xFF	; 255
 706:	7f ef       	ldi	r23, 0xFF	; 255
 708:	c5 01       	movw	r24, r10
 70a:	0e 94 cb 04 	call	0x996	; 0x996 <strnlen>
 70e:	4c 01       	movw	r8, r24
 710:	82 01       	movw	r16, r4
 712:	f3 2d       	mov	r31, r3
 714:	ff 77       	andi	r31, 0x7F	; 127
 716:	3f 2e       	mov	r3, r31
 718:	16 c0       	rjmp	.+44     	; 0x746 <vfprintf+0x188>
 71a:	28 01       	movw	r4, r16
 71c:	22 e0       	ldi	r18, 0x02	; 2
 71e:	42 0e       	add	r4, r18
 720:	51 1c       	adc	r5, r1
 722:	f8 01       	movw	r30, r16
 724:	a0 80       	ld	r10, Z
 726:	b1 80       	ldd	r11, Z+1	; 0x01
 728:	36 fe       	sbrs	r3, 6
 72a:	03 c0       	rjmp	.+6      	; 0x732 <vfprintf+0x174>
 72c:	69 2d       	mov	r22, r9
 72e:	70 e0       	ldi	r23, 0x00	; 0
 730:	02 c0       	rjmp	.+4      	; 0x736 <vfprintf+0x178>
 732:	6f ef       	ldi	r22, 0xFF	; 255
 734:	7f ef       	ldi	r23, 0xFF	; 255
 736:	c5 01       	movw	r24, r10
 738:	0e 94 c0 04 	call	0x980	; 0x980 <strnlen_P>
 73c:	4c 01       	movw	r8, r24
 73e:	f3 2d       	mov	r31, r3
 740:	f0 68       	ori	r31, 0x80	; 128
 742:	3f 2e       	mov	r3, r31
 744:	82 01       	movw	r16, r4
 746:	33 fc       	sbrc	r3, 3
 748:	1b c0       	rjmp	.+54     	; 0x780 <vfprintf+0x1c2>
 74a:	82 2d       	mov	r24, r2
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	88 16       	cp	r8, r24
 750:	99 06       	cpc	r9, r25
 752:	b0 f4       	brcc	.+44     	; 0x780 <vfprintf+0x1c2>
 754:	b6 01       	movw	r22, r12
 756:	80 e2       	ldi	r24, 0x20	; 32
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	0e 94 d6 04 	call	0x9ac	; 0x9ac <fputc>
 75e:	2a 94       	dec	r2
 760:	f4 cf       	rjmp	.-24     	; 0x74a <vfprintf+0x18c>
 762:	f5 01       	movw	r30, r10
 764:	37 fc       	sbrc	r3, 7
 766:	85 91       	lpm	r24, Z+
 768:	37 fe       	sbrs	r3, 7
 76a:	81 91       	ld	r24, Z+
 76c:	5f 01       	movw	r10, r30
 76e:	b6 01       	movw	r22, r12
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	0e 94 d6 04 	call	0x9ac	; 0x9ac <fputc>
 776:	21 10       	cpse	r2, r1
 778:	2a 94       	dec	r2
 77a:	21 e0       	ldi	r18, 0x01	; 1
 77c:	82 1a       	sub	r8, r18
 77e:	91 08       	sbc	r9, r1
 780:	81 14       	cp	r8, r1
 782:	91 04       	cpc	r9, r1
 784:	71 f7       	brne	.-36     	; 0x762 <vfprintf+0x1a4>
 786:	e8 c0       	rjmp	.+464    	; 0x958 <__stack+0x59>
 788:	84 36       	cpi	r24, 0x64	; 100
 78a:	11 f0       	breq	.+4      	; 0x790 <vfprintf+0x1d2>
 78c:	89 36       	cpi	r24, 0x69	; 105
 78e:	41 f5       	brne	.+80     	; 0x7e0 <vfprintf+0x222>
 790:	f8 01       	movw	r30, r16
 792:	37 fe       	sbrs	r3, 7
 794:	07 c0       	rjmp	.+14     	; 0x7a4 <vfprintf+0x1e6>
 796:	60 81       	ld	r22, Z
 798:	71 81       	ldd	r23, Z+1	; 0x01
 79a:	82 81       	ldd	r24, Z+2	; 0x02
 79c:	93 81       	ldd	r25, Z+3	; 0x03
 79e:	0c 5f       	subi	r16, 0xFC	; 252
 7a0:	1f 4f       	sbci	r17, 0xFF	; 255
 7a2:	08 c0       	rjmp	.+16     	; 0x7b4 <vfprintf+0x1f6>
 7a4:	60 81       	ld	r22, Z
 7a6:	71 81       	ldd	r23, Z+1	; 0x01
 7a8:	07 2e       	mov	r0, r23
 7aa:	00 0c       	add	r0, r0
 7ac:	88 0b       	sbc	r24, r24
 7ae:	99 0b       	sbc	r25, r25
 7b0:	0e 5f       	subi	r16, 0xFE	; 254
 7b2:	1f 4f       	sbci	r17, 0xFF	; 255
 7b4:	f3 2d       	mov	r31, r3
 7b6:	ff 76       	andi	r31, 0x6F	; 111
 7b8:	3f 2e       	mov	r3, r31
 7ba:	97 ff       	sbrs	r25, 7
 7bc:	09 c0       	rjmp	.+18     	; 0x7d0 <vfprintf+0x212>
 7be:	90 95       	com	r25
 7c0:	80 95       	com	r24
 7c2:	70 95       	com	r23
 7c4:	61 95       	neg	r22
 7c6:	7f 4f       	sbci	r23, 0xFF	; 255
 7c8:	8f 4f       	sbci	r24, 0xFF	; 255
 7ca:	9f 4f       	sbci	r25, 0xFF	; 255
 7cc:	f0 68       	ori	r31, 0x80	; 128
 7ce:	3f 2e       	mov	r3, r31
 7d0:	2a e0       	ldi	r18, 0x0A	; 10
 7d2:	30 e0       	ldi	r19, 0x00	; 0
 7d4:	a3 01       	movw	r20, r6
 7d6:	0e 94 12 05 	call	0xa24	; 0xa24 <__ultoa_invert>
 7da:	88 2e       	mov	r8, r24
 7dc:	86 18       	sub	r8, r6
 7de:	45 c0       	rjmp	.+138    	; 0x86a <vfprintf+0x2ac>
 7e0:	85 37       	cpi	r24, 0x75	; 117
 7e2:	31 f4       	brne	.+12     	; 0x7f0 <vfprintf+0x232>
 7e4:	23 2d       	mov	r18, r3
 7e6:	2f 7e       	andi	r18, 0xEF	; 239
 7e8:	b2 2e       	mov	r11, r18
 7ea:	2a e0       	ldi	r18, 0x0A	; 10
 7ec:	30 e0       	ldi	r19, 0x00	; 0
 7ee:	25 c0       	rjmp	.+74     	; 0x83a <vfprintf+0x27c>
 7f0:	93 2d       	mov	r25, r3
 7f2:	99 7f       	andi	r25, 0xF9	; 249
 7f4:	b9 2e       	mov	r11, r25
 7f6:	8f 36       	cpi	r24, 0x6F	; 111
 7f8:	c1 f0       	breq	.+48     	; 0x82a <vfprintf+0x26c>
 7fa:	18 f4       	brcc	.+6      	; 0x802 <vfprintf+0x244>
 7fc:	88 35       	cpi	r24, 0x58	; 88
 7fe:	79 f0       	breq	.+30     	; 0x81e <vfprintf+0x260>
 800:	b5 c0       	rjmp	.+362    	; 0x96c <__stack+0x6d>
 802:	80 37       	cpi	r24, 0x70	; 112
 804:	19 f0       	breq	.+6      	; 0x80c <vfprintf+0x24e>
 806:	88 37       	cpi	r24, 0x78	; 120
 808:	21 f0       	breq	.+8      	; 0x812 <vfprintf+0x254>
 80a:	b0 c0       	rjmp	.+352    	; 0x96c <__stack+0x6d>
 80c:	e9 2f       	mov	r30, r25
 80e:	e0 61       	ori	r30, 0x10	; 16
 810:	be 2e       	mov	r11, r30
 812:	b4 fe       	sbrs	r11, 4
 814:	0d c0       	rjmp	.+26     	; 0x830 <vfprintf+0x272>
 816:	fb 2d       	mov	r31, r11
 818:	f4 60       	ori	r31, 0x04	; 4
 81a:	bf 2e       	mov	r11, r31
 81c:	09 c0       	rjmp	.+18     	; 0x830 <vfprintf+0x272>
 81e:	34 fe       	sbrs	r3, 4
 820:	0a c0       	rjmp	.+20     	; 0x836 <vfprintf+0x278>
 822:	29 2f       	mov	r18, r25
 824:	26 60       	ori	r18, 0x06	; 6
 826:	b2 2e       	mov	r11, r18
 828:	06 c0       	rjmp	.+12     	; 0x836 <vfprintf+0x278>
 82a:	28 e0       	ldi	r18, 0x08	; 8
 82c:	30 e0       	ldi	r19, 0x00	; 0
 82e:	05 c0       	rjmp	.+10     	; 0x83a <vfprintf+0x27c>
 830:	20 e1       	ldi	r18, 0x10	; 16
 832:	30 e0       	ldi	r19, 0x00	; 0
 834:	02 c0       	rjmp	.+4      	; 0x83a <vfprintf+0x27c>
 836:	20 e1       	ldi	r18, 0x10	; 16
 838:	32 e0       	ldi	r19, 0x02	; 2
 83a:	f8 01       	movw	r30, r16
 83c:	b7 fe       	sbrs	r11, 7
 83e:	07 c0       	rjmp	.+14     	; 0x84e <vfprintf+0x290>
 840:	60 81       	ld	r22, Z
 842:	71 81       	ldd	r23, Z+1	; 0x01
 844:	82 81       	ldd	r24, Z+2	; 0x02
 846:	93 81       	ldd	r25, Z+3	; 0x03
 848:	0c 5f       	subi	r16, 0xFC	; 252
 84a:	1f 4f       	sbci	r17, 0xFF	; 255
 84c:	06 c0       	rjmp	.+12     	; 0x85a <vfprintf+0x29c>
 84e:	60 81       	ld	r22, Z
 850:	71 81       	ldd	r23, Z+1	; 0x01
 852:	80 e0       	ldi	r24, 0x00	; 0
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	0e 5f       	subi	r16, 0xFE	; 254
 858:	1f 4f       	sbci	r17, 0xFF	; 255
 85a:	a3 01       	movw	r20, r6
 85c:	0e 94 12 05 	call	0xa24	; 0xa24 <__ultoa_invert>
 860:	88 2e       	mov	r8, r24
 862:	86 18       	sub	r8, r6
 864:	fb 2d       	mov	r31, r11
 866:	ff 77       	andi	r31, 0x7F	; 127
 868:	3f 2e       	mov	r3, r31
 86a:	36 fe       	sbrs	r3, 6
 86c:	0d c0       	rjmp	.+26     	; 0x888 <vfprintf+0x2ca>
 86e:	23 2d       	mov	r18, r3
 870:	2e 7f       	andi	r18, 0xFE	; 254
 872:	a2 2e       	mov	r10, r18
 874:	89 14       	cp	r8, r9
 876:	58 f4       	brcc	.+22     	; 0x88e <vfprintf+0x2d0>
 878:	34 fe       	sbrs	r3, 4
 87a:	0b c0       	rjmp	.+22     	; 0x892 <vfprintf+0x2d4>
 87c:	32 fc       	sbrc	r3, 2
 87e:	09 c0       	rjmp	.+18     	; 0x892 <vfprintf+0x2d4>
 880:	83 2d       	mov	r24, r3
 882:	8e 7e       	andi	r24, 0xEE	; 238
 884:	a8 2e       	mov	r10, r24
 886:	05 c0       	rjmp	.+10     	; 0x892 <vfprintf+0x2d4>
 888:	b8 2c       	mov	r11, r8
 88a:	a3 2c       	mov	r10, r3
 88c:	03 c0       	rjmp	.+6      	; 0x894 <vfprintf+0x2d6>
 88e:	b8 2c       	mov	r11, r8
 890:	01 c0       	rjmp	.+2      	; 0x894 <vfprintf+0x2d6>
 892:	b9 2c       	mov	r11, r9
 894:	a4 fe       	sbrs	r10, 4
 896:	0f c0       	rjmp	.+30     	; 0x8b6 <vfprintf+0x2f8>
 898:	fe 01       	movw	r30, r28
 89a:	e8 0d       	add	r30, r8
 89c:	f1 1d       	adc	r31, r1
 89e:	80 81       	ld	r24, Z
 8a0:	80 33       	cpi	r24, 0x30	; 48
 8a2:	21 f4       	brne	.+8      	; 0x8ac <vfprintf+0x2ee>
 8a4:	9a 2d       	mov	r25, r10
 8a6:	99 7e       	andi	r25, 0xE9	; 233
 8a8:	a9 2e       	mov	r10, r25
 8aa:	09 c0       	rjmp	.+18     	; 0x8be <vfprintf+0x300>
 8ac:	a2 fe       	sbrs	r10, 2
 8ae:	06 c0       	rjmp	.+12     	; 0x8bc <vfprintf+0x2fe>
 8b0:	b3 94       	inc	r11
 8b2:	b3 94       	inc	r11
 8b4:	04 c0       	rjmp	.+8      	; 0x8be <vfprintf+0x300>
 8b6:	8a 2d       	mov	r24, r10
 8b8:	86 78       	andi	r24, 0x86	; 134
 8ba:	09 f0       	breq	.+2      	; 0x8be <vfprintf+0x300>
 8bc:	b3 94       	inc	r11
 8be:	a3 fc       	sbrc	r10, 3
 8c0:	11 c0       	rjmp	.+34     	; 0x8e4 <vfprintf+0x326>
 8c2:	a0 fe       	sbrs	r10, 0
 8c4:	06 c0       	rjmp	.+12     	; 0x8d2 <vfprintf+0x314>
 8c6:	b2 14       	cp	r11, r2
 8c8:	88 f4       	brcc	.+34     	; 0x8ec <vfprintf+0x32e>
 8ca:	28 0c       	add	r2, r8
 8cc:	92 2c       	mov	r9, r2
 8ce:	9b 18       	sub	r9, r11
 8d0:	0e c0       	rjmp	.+28     	; 0x8ee <vfprintf+0x330>
 8d2:	b2 14       	cp	r11, r2
 8d4:	60 f4       	brcc	.+24     	; 0x8ee <vfprintf+0x330>
 8d6:	b6 01       	movw	r22, r12
 8d8:	80 e2       	ldi	r24, 0x20	; 32
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	0e 94 d6 04 	call	0x9ac	; 0x9ac <fputc>
 8e0:	b3 94       	inc	r11
 8e2:	f7 cf       	rjmp	.-18     	; 0x8d2 <vfprintf+0x314>
 8e4:	b2 14       	cp	r11, r2
 8e6:	18 f4       	brcc	.+6      	; 0x8ee <vfprintf+0x330>
 8e8:	2b 18       	sub	r2, r11
 8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <vfprintf+0x332>
 8ec:	98 2c       	mov	r9, r8
 8ee:	21 2c       	mov	r2, r1
 8f0:	a4 fe       	sbrs	r10, 4
 8f2:	10 c0       	rjmp	.+32     	; 0x914 <__stack+0x15>
 8f4:	b6 01       	movw	r22, r12
 8f6:	80 e3       	ldi	r24, 0x30	; 48
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	0e 94 d6 04 	call	0x9ac	; 0x9ac <fputc>
 8fe:	a2 fe       	sbrs	r10, 2
 900:	17 c0       	rjmp	.+46     	; 0x930 <__stack+0x31>
 902:	a1 fc       	sbrc	r10, 1
 904:	03 c0       	rjmp	.+6      	; 0x90c <__stack+0xd>
 906:	88 e7       	ldi	r24, 0x78	; 120
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	02 c0       	rjmp	.+4      	; 0x910 <__stack+0x11>
 90c:	88 e5       	ldi	r24, 0x58	; 88
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	b6 01       	movw	r22, r12
 912:	0c c0       	rjmp	.+24     	; 0x92c <__stack+0x2d>
 914:	8a 2d       	mov	r24, r10
 916:	86 78       	andi	r24, 0x86	; 134
 918:	59 f0       	breq	.+22     	; 0x930 <__stack+0x31>
 91a:	a1 fe       	sbrs	r10, 1
 91c:	02 c0       	rjmp	.+4      	; 0x922 <__stack+0x23>
 91e:	8b e2       	ldi	r24, 0x2B	; 43
 920:	01 c0       	rjmp	.+2      	; 0x924 <__stack+0x25>
 922:	80 e2       	ldi	r24, 0x20	; 32
 924:	a7 fc       	sbrc	r10, 7
 926:	8d e2       	ldi	r24, 0x2D	; 45
 928:	b6 01       	movw	r22, r12
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	0e 94 d6 04 	call	0x9ac	; 0x9ac <fputc>
 930:	89 14       	cp	r8, r9
 932:	38 f4       	brcc	.+14     	; 0x942 <__stack+0x43>
 934:	b6 01       	movw	r22, r12
 936:	80 e3       	ldi	r24, 0x30	; 48
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	0e 94 d6 04 	call	0x9ac	; 0x9ac <fputc>
 93e:	9a 94       	dec	r9
 940:	f7 cf       	rjmp	.-18     	; 0x930 <__stack+0x31>
 942:	8a 94       	dec	r8
 944:	f3 01       	movw	r30, r6
 946:	e8 0d       	add	r30, r8
 948:	f1 1d       	adc	r31, r1
 94a:	80 81       	ld	r24, Z
 94c:	b6 01       	movw	r22, r12
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	0e 94 d6 04 	call	0x9ac	; 0x9ac <fputc>
 954:	81 10       	cpse	r8, r1
 956:	f5 cf       	rjmp	.-22     	; 0x942 <__stack+0x43>
 958:	22 20       	and	r2, r2
 95a:	09 f4       	brne	.+2      	; 0x95e <__stack+0x5f>
 95c:	42 ce       	rjmp	.-892    	; 0x5e2 <vfprintf+0x24>
 95e:	b6 01       	movw	r22, r12
 960:	80 e2       	ldi	r24, 0x20	; 32
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	0e 94 d6 04 	call	0x9ac	; 0x9ac <fputc>
 968:	2a 94       	dec	r2
 96a:	f6 cf       	rjmp	.-20     	; 0x958 <__stack+0x59>
 96c:	f6 01       	movw	r30, r12
 96e:	86 81       	ldd	r24, Z+6	; 0x06
 970:	97 81       	ldd	r25, Z+7	; 0x07
 972:	02 c0       	rjmp	.+4      	; 0x978 <__stack+0x79>
 974:	8f ef       	ldi	r24, 0xFF	; 255
 976:	9f ef       	ldi	r25, 0xFF	; 255
 978:	2b 96       	adiw	r28, 0x0b	; 11
 97a:	e2 e1       	ldi	r30, 0x12	; 18
 97c:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__epilogue_restores__>

00000980 <strnlen_P>:
 980:	fc 01       	movw	r30, r24
 982:	05 90       	lpm	r0, Z+
 984:	61 50       	subi	r22, 0x01	; 1
 986:	70 40       	sbci	r23, 0x00	; 0
 988:	01 10       	cpse	r0, r1
 98a:	d8 f7       	brcc	.-10     	; 0x982 <strnlen_P+0x2>
 98c:	80 95       	com	r24
 98e:	90 95       	com	r25
 990:	8e 0f       	add	r24, r30
 992:	9f 1f       	adc	r25, r31
 994:	08 95       	ret

00000996 <strnlen>:
 996:	fc 01       	movw	r30, r24
 998:	61 50       	subi	r22, 0x01	; 1
 99a:	70 40       	sbci	r23, 0x00	; 0
 99c:	01 90       	ld	r0, Z+
 99e:	01 10       	cpse	r0, r1
 9a0:	d8 f7       	brcc	.-10     	; 0x998 <strnlen+0x2>
 9a2:	80 95       	com	r24
 9a4:	90 95       	com	r25
 9a6:	8e 0f       	add	r24, r30
 9a8:	9f 1f       	adc	r25, r31
 9aa:	08 95       	ret

000009ac <fputc>:
 9ac:	0f 93       	push	r16
 9ae:	1f 93       	push	r17
 9b0:	cf 93       	push	r28
 9b2:	df 93       	push	r29
 9b4:	fb 01       	movw	r30, r22
 9b6:	23 81       	ldd	r18, Z+3	; 0x03
 9b8:	21 fd       	sbrc	r18, 1
 9ba:	03 c0       	rjmp	.+6      	; 0x9c2 <fputc+0x16>
 9bc:	8f ef       	ldi	r24, 0xFF	; 255
 9be:	9f ef       	ldi	r25, 0xFF	; 255
 9c0:	2c c0       	rjmp	.+88     	; 0xa1a <fputc+0x6e>
 9c2:	22 ff       	sbrs	r18, 2
 9c4:	16 c0       	rjmp	.+44     	; 0x9f2 <fputc+0x46>
 9c6:	46 81       	ldd	r20, Z+6	; 0x06
 9c8:	57 81       	ldd	r21, Z+7	; 0x07
 9ca:	24 81       	ldd	r18, Z+4	; 0x04
 9cc:	35 81       	ldd	r19, Z+5	; 0x05
 9ce:	42 17       	cp	r20, r18
 9d0:	53 07       	cpc	r21, r19
 9d2:	44 f4       	brge	.+16     	; 0x9e4 <fputc+0x38>
 9d4:	a0 81       	ld	r26, Z
 9d6:	b1 81       	ldd	r27, Z+1	; 0x01
 9d8:	9d 01       	movw	r18, r26
 9da:	2f 5f       	subi	r18, 0xFF	; 255
 9dc:	3f 4f       	sbci	r19, 0xFF	; 255
 9de:	31 83       	std	Z+1, r19	; 0x01
 9e0:	20 83       	st	Z, r18
 9e2:	8c 93       	st	X, r24
 9e4:	26 81       	ldd	r18, Z+6	; 0x06
 9e6:	37 81       	ldd	r19, Z+7	; 0x07
 9e8:	2f 5f       	subi	r18, 0xFF	; 255
 9ea:	3f 4f       	sbci	r19, 0xFF	; 255
 9ec:	37 83       	std	Z+7, r19	; 0x07
 9ee:	26 83       	std	Z+6, r18	; 0x06
 9f0:	14 c0       	rjmp	.+40     	; 0xa1a <fputc+0x6e>
 9f2:	8b 01       	movw	r16, r22
 9f4:	ec 01       	movw	r28, r24
 9f6:	fb 01       	movw	r30, r22
 9f8:	00 84       	ldd	r0, Z+8	; 0x08
 9fa:	f1 85       	ldd	r31, Z+9	; 0x09
 9fc:	e0 2d       	mov	r30, r0
 9fe:	09 95       	icall
 a00:	89 2b       	or	r24, r25
 a02:	e1 f6       	brne	.-72     	; 0x9bc <fputc+0x10>
 a04:	d8 01       	movw	r26, r16
 a06:	16 96       	adiw	r26, 0x06	; 6
 a08:	8d 91       	ld	r24, X+
 a0a:	9c 91       	ld	r25, X
 a0c:	17 97       	sbiw	r26, 0x07	; 7
 a0e:	01 96       	adiw	r24, 0x01	; 1
 a10:	17 96       	adiw	r26, 0x07	; 7
 a12:	9c 93       	st	X, r25
 a14:	8e 93       	st	-X, r24
 a16:	16 97       	sbiw	r26, 0x06	; 6
 a18:	ce 01       	movw	r24, r28
 a1a:	df 91       	pop	r29
 a1c:	cf 91       	pop	r28
 a1e:	1f 91       	pop	r17
 a20:	0f 91       	pop	r16
 a22:	08 95       	ret

00000a24 <__ultoa_invert>:
 a24:	fa 01       	movw	r30, r20
 a26:	aa 27       	eor	r26, r26
 a28:	28 30       	cpi	r18, 0x08	; 8
 a2a:	51 f1       	breq	.+84     	; 0xa80 <__ultoa_invert+0x5c>
 a2c:	20 31       	cpi	r18, 0x10	; 16
 a2e:	81 f1       	breq	.+96     	; 0xa90 <__ultoa_invert+0x6c>
 a30:	e8 94       	clt
 a32:	6f 93       	push	r22
 a34:	6e 7f       	andi	r22, 0xFE	; 254
 a36:	6e 5f       	subi	r22, 0xFE	; 254
 a38:	7f 4f       	sbci	r23, 0xFF	; 255
 a3a:	8f 4f       	sbci	r24, 0xFF	; 255
 a3c:	9f 4f       	sbci	r25, 0xFF	; 255
 a3e:	af 4f       	sbci	r26, 0xFF	; 255
 a40:	b1 e0       	ldi	r27, 0x01	; 1
 a42:	3e d0       	rcall	.+124    	; 0xac0 <__ultoa_invert+0x9c>
 a44:	b4 e0       	ldi	r27, 0x04	; 4
 a46:	3c d0       	rcall	.+120    	; 0xac0 <__ultoa_invert+0x9c>
 a48:	67 0f       	add	r22, r23
 a4a:	78 1f       	adc	r23, r24
 a4c:	89 1f       	adc	r24, r25
 a4e:	9a 1f       	adc	r25, r26
 a50:	a1 1d       	adc	r26, r1
 a52:	68 0f       	add	r22, r24
 a54:	79 1f       	adc	r23, r25
 a56:	8a 1f       	adc	r24, r26
 a58:	91 1d       	adc	r25, r1
 a5a:	a1 1d       	adc	r26, r1
 a5c:	6a 0f       	add	r22, r26
 a5e:	71 1d       	adc	r23, r1
 a60:	81 1d       	adc	r24, r1
 a62:	91 1d       	adc	r25, r1
 a64:	a1 1d       	adc	r26, r1
 a66:	20 d0       	rcall	.+64     	; 0xaa8 <__ultoa_invert+0x84>
 a68:	09 f4       	brne	.+2      	; 0xa6c <__ultoa_invert+0x48>
 a6a:	68 94       	set
 a6c:	3f 91       	pop	r19
 a6e:	2a e0       	ldi	r18, 0x0A	; 10
 a70:	26 9f       	mul	r18, r22
 a72:	11 24       	eor	r1, r1
 a74:	30 19       	sub	r19, r0
 a76:	30 5d       	subi	r19, 0xD0	; 208
 a78:	31 93       	st	Z+, r19
 a7a:	de f6       	brtc	.-74     	; 0xa32 <__ultoa_invert+0xe>
 a7c:	cf 01       	movw	r24, r30
 a7e:	08 95       	ret
 a80:	46 2f       	mov	r20, r22
 a82:	47 70       	andi	r20, 0x07	; 7
 a84:	40 5d       	subi	r20, 0xD0	; 208
 a86:	41 93       	st	Z+, r20
 a88:	b3 e0       	ldi	r27, 0x03	; 3
 a8a:	0f d0       	rcall	.+30     	; 0xaaa <__ultoa_invert+0x86>
 a8c:	c9 f7       	brne	.-14     	; 0xa80 <__ultoa_invert+0x5c>
 a8e:	f6 cf       	rjmp	.-20     	; 0xa7c <__ultoa_invert+0x58>
 a90:	46 2f       	mov	r20, r22
 a92:	4f 70       	andi	r20, 0x0F	; 15
 a94:	40 5d       	subi	r20, 0xD0	; 208
 a96:	4a 33       	cpi	r20, 0x3A	; 58
 a98:	18 f0       	brcs	.+6      	; 0xaa0 <__ultoa_invert+0x7c>
 a9a:	49 5d       	subi	r20, 0xD9	; 217
 a9c:	31 fd       	sbrc	r19, 1
 a9e:	40 52       	subi	r20, 0x20	; 32
 aa0:	41 93       	st	Z+, r20
 aa2:	02 d0       	rcall	.+4      	; 0xaa8 <__ultoa_invert+0x84>
 aa4:	a9 f7       	brne	.-22     	; 0xa90 <__ultoa_invert+0x6c>
 aa6:	ea cf       	rjmp	.-44     	; 0xa7c <__ultoa_invert+0x58>
 aa8:	b4 e0       	ldi	r27, 0x04	; 4
 aaa:	a6 95       	lsr	r26
 aac:	97 95       	ror	r25
 aae:	87 95       	ror	r24
 ab0:	77 95       	ror	r23
 ab2:	67 95       	ror	r22
 ab4:	ba 95       	dec	r27
 ab6:	c9 f7       	brne	.-14     	; 0xaaa <__ultoa_invert+0x86>
 ab8:	00 97       	sbiw	r24, 0x00	; 0
 aba:	61 05       	cpc	r22, r1
 abc:	71 05       	cpc	r23, r1
 abe:	08 95       	ret
 ac0:	9b 01       	movw	r18, r22
 ac2:	ac 01       	movw	r20, r24
 ac4:	0a 2e       	mov	r0, r26
 ac6:	06 94       	lsr	r0
 ac8:	57 95       	ror	r21
 aca:	47 95       	ror	r20
 acc:	37 95       	ror	r19
 ace:	27 95       	ror	r18
 ad0:	ba 95       	dec	r27
 ad2:	c9 f7       	brne	.-14     	; 0xac6 <__ultoa_invert+0xa2>
 ad4:	62 0f       	add	r22, r18
 ad6:	73 1f       	adc	r23, r19
 ad8:	84 1f       	adc	r24, r20
 ada:	95 1f       	adc	r25, r21
 adc:	a0 1d       	adc	r26, r0
 ade:	08 95       	ret

00000ae0 <__prologue_saves__>:
 ae0:	2f 92       	push	r2
 ae2:	3f 92       	push	r3
 ae4:	4f 92       	push	r4
 ae6:	5f 92       	push	r5
 ae8:	6f 92       	push	r6
 aea:	7f 92       	push	r7
 aec:	8f 92       	push	r8
 aee:	9f 92       	push	r9
 af0:	af 92       	push	r10
 af2:	bf 92       	push	r11
 af4:	cf 92       	push	r12
 af6:	df 92       	push	r13
 af8:	ef 92       	push	r14
 afa:	ff 92       	push	r15
 afc:	0f 93       	push	r16
 afe:	1f 93       	push	r17
 b00:	cf 93       	push	r28
 b02:	df 93       	push	r29
 b04:	cd b7       	in	r28, 0x3d	; 61
 b06:	de b7       	in	r29, 0x3e	; 62
 b08:	ca 1b       	sub	r28, r26
 b0a:	db 0b       	sbc	r29, r27
 b0c:	0f b6       	in	r0, 0x3f	; 63
 b0e:	f8 94       	cli
 b10:	de bf       	out	0x3e, r29	; 62
 b12:	0f be       	out	0x3f, r0	; 63
 b14:	cd bf       	out	0x3d, r28	; 61
 b16:	09 94       	ijmp

00000b18 <__epilogue_restores__>:
 b18:	2a 88       	ldd	r2, Y+18	; 0x12
 b1a:	39 88       	ldd	r3, Y+17	; 0x11
 b1c:	48 88       	ldd	r4, Y+16	; 0x10
 b1e:	5f 84       	ldd	r5, Y+15	; 0x0f
 b20:	6e 84       	ldd	r6, Y+14	; 0x0e
 b22:	7d 84       	ldd	r7, Y+13	; 0x0d
 b24:	8c 84       	ldd	r8, Y+12	; 0x0c
 b26:	9b 84       	ldd	r9, Y+11	; 0x0b
 b28:	aa 84       	ldd	r10, Y+10	; 0x0a
 b2a:	b9 84       	ldd	r11, Y+9	; 0x09
 b2c:	c8 84       	ldd	r12, Y+8	; 0x08
 b2e:	df 80       	ldd	r13, Y+7	; 0x07
 b30:	ee 80       	ldd	r14, Y+6	; 0x06
 b32:	fd 80       	ldd	r15, Y+5	; 0x05
 b34:	0c 81       	ldd	r16, Y+4	; 0x04
 b36:	1b 81       	ldd	r17, Y+3	; 0x03
 b38:	aa 81       	ldd	r26, Y+2	; 0x02
 b3a:	b9 81       	ldd	r27, Y+1	; 0x01
 b3c:	ce 0f       	add	r28, r30
 b3e:	d1 1d       	adc	r29, r1
 b40:	0f b6       	in	r0, 0x3f	; 63
 b42:	f8 94       	cli
 b44:	de bf       	out	0x3e, r29	; 62
 b46:	0f be       	out	0x3f, r0	; 63
 b48:	cd bf       	out	0x3d, r28	; 61
 b4a:	ed 01       	movw	r28, r26
 b4c:	08 95       	ret

00000b4e <_exit>:
 b4e:	f8 94       	cli

00000b50 <__stop_program>:
 b50:	ff cf       	rjmp	.-2      	; 0xb50 <__stop_program>
